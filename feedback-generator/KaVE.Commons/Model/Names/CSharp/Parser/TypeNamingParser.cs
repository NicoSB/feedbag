//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jonas\Documents\kave\feedback-generator\KaVE.Commons\Model\Names\CSharp\Parser\TypeNaming.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KaVE.Commons.Model.Names.CSharp.Parser {

/**
 * Copyright 2016 Sebastian Proksch
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class TypeNamingParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, UNKNOWN=27, POSNUM=28, LETTER=29, SIGN=30, WS=31, 
		EOL=32;
	public const int
		RULE_typeEOL = 0, RULE_methodEOL = 1, RULE_type = 2, RULE_typeParameter = 3, 
		RULE_regularType = 4, RULE_delegateType = 5, RULE_arrayType = 6, RULE_nestedType = 7, 
		RULE_nestedTypeName = 8, RULE_resolvedType = 9, RULE_namespace = 10, RULE_typeName = 11, 
		RULE_possiblyGenericTypeName = 12, RULE_enumTypeName = 13, RULE_interfaceTypeName = 14, 
		RULE_structTypeName = 15, RULE_simpleTypeName = 16, RULE_genericTypePart = 17, 
		RULE_genericParam = 18, RULE_boundTypeParameter = 19, RULE_assembly = 20, 
		RULE_assemblyVersion = 21, RULE_method = 22, RULE_regularMethod = 23, 
		RULE_methodParameters = 24, RULE_nonStaticCtor = 25, RULE_staticCctor = 26, 
		RULE_customMethod = 27, RULE_formalParam = 28, RULE_parameterModifier = 29, 
		RULE_staticModifier = 30, RULE_paramsModifier = 31, RULE_optsModifier = 32, 
		RULE_refModifier = 33, RULE_outModifier = 34, RULE_extensionModifier = 35, 
		RULE_id = 36, RULE_num = 37;
	public static readonly string[] ruleNames = {
		"typeEOL", "methodEOL", "type", "typeParameter", "regularType", "delegateType", 
		"arrayType", "nestedType", "nestedTypeName", "resolvedType", "namespace", 
		"typeName", "possiblyGenericTypeName", "enumTypeName", "interfaceTypeName", 
		"structTypeName", "simpleTypeName", "genericTypePart", "genericParam", 
		"boundTypeParameter", "assembly", "assemblyVersion", "method", "regularMethod", 
		"methodParameters", "nonStaticCtor", "staticCctor", "customMethod", "formalParam", 
		"parameterModifier", "staticModifier", "paramsModifier", "optsModifier", 
		"refModifier", "outModifier", "extensionModifier", "id", "num"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'d:'", "'arr('", "'):'", "'n:'", "'+'", "'.'", "'e:'", "'i:'", 
		"'s:'", "'''", "'['", "']'", "'->'", "'('", "')'", "']..ctor'", "']..cctor'", 
		"'].'", "'static'", "'params'", "'opts'", "'ref'", "'out'", "'this'", 
		"'0'", "'?'", null, null, null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "UNKNOWN", "POSNUM", "LETTER", "SIGN", "WS", "EOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TypeNaming.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TypeNamingParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class TypeEOLContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(TypeNamingParser.EOL, 0); }
		public TypeEOLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeEOL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterTypeEOL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitTypeEOL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeEOL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeEOLContext typeEOL() {
		TypeEOLContext _localctx = new TypeEOLContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_typeEOL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; type();
			State = 77; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodEOLContext : ParserRuleContext {
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(TypeNamingParser.EOL, 0); }
		public MethodEOLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodEOL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterMethodEOL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitMethodEOL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodEOL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodEOLContext methodEOL() {
		MethodEOLContext _localctx = new MethodEOLContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_methodEOL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; method();
			State = 80; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public RegularTypeContext regularType() {
			return GetRuleContext<RegularTypeContext>(0);
		}
		public DelegateTypeContext delegateType() {
			return GetRuleContext<DelegateTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_type);
		try {
			State = 87;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; Match(UNKNOWN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; typeParameter();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 84; regularType();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 85; delegateType();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 86; arrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_typeParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegularTypeContext : ParserRuleContext {
		public AssemblyContext assembly() {
			return GetRuleContext<AssemblyContext>(0);
		}
		public ResolvedTypeContext resolvedType() {
			return GetRuleContext<ResolvedTypeContext>(0);
		}
		public NestedTypeContext nestedType() {
			return GetRuleContext<NestedTypeContext>(0);
		}
		public ITerminalNode WS() { return GetToken(TypeNamingParser.WS, 0); }
		public RegularTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regularType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterRegularType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitRegularType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegularType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegularTypeContext regularType() {
		RegularTypeContext _localctx = new RegularTypeContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_regularType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			switch (_input.La(1)) {
			case T__7:
			case T__8:
			case T__9:
			case LETTER:
				{
				State = 91; resolvedType();
				}
				break;
			case T__4:
				{
				State = 92; nestedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 95; Match(T__0);
			State = 97;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 96; Match(WS);
				}
			}

			State = 99; assembly();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateTypeContext : ParserRuleContext {
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public DelegateTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterDelegateType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitDelegateType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateTypeContext delegateType() {
		DelegateTypeContext _localctx = new DelegateTypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_delegateType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(T__1);
			State = 102; method();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public ITerminalNode POSNUM() { return GetToken(TypeNamingParser.POSNUM, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(T__2);
			State = 105; Match(POSNUM);
			State = 106; Match(T__3);
			State = 107; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedTypeContext : ParserRuleContext {
		public NestedTypeNameContext nestedTypeName() {
			return GetRuleContext<NestedTypeNameContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NestedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNestedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNestedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedTypeContext nestedType() {
		NestedTypeContext _localctx = new NestedTypeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_nestedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(T__4);
			State = 110; nestedTypeName();
			State = 111; Match(T__5);
			State = 112; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedTypeNameContext : ParserRuleContext {
		public NestedTypeContext nestedType() {
			return GetRuleContext<NestedTypeContext>(0);
		}
		public ResolvedTypeContext resolvedType() {
			return GetRuleContext<ResolvedTypeContext>(0);
		}
		public NestedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNestedTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNestedTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedTypeNameContext nestedTypeName() {
		NestedTypeNameContext _localctx = new NestedTypeNameContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_nestedTypeName);
		try {
			State = 116;
			switch (_input.La(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; nestedType();
				}
				break;
			case T__7:
			case T__8:
			case T__9:
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; resolvedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResolvedTypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public ResolvedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resolvedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterResolvedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitResolvedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResolvedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResolvedTypeContext resolvedType() {
		ResolvedTypeContext _localctx = new ResolvedTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_resolvedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 118; @namespace();
				}
				break;
			}
			State = 121; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_namespace);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 123; id();
					State = 124; Match(T__6);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 128;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		public PossiblyGenericTypeNameContext possiblyGenericTypeName() {
			return GetRuleContext<PossiblyGenericTypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_typeName);
		try {
			State = 132;
			switch (_input.La(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130; enumTypeName();
				}
				break;
			case T__8:
			case T__9:
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131; possiblyGenericTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PossiblyGenericTypeNameContext : ParserRuleContext {
		public InterfaceTypeNameContext interfaceTypeName() {
			return GetRuleContext<InterfaceTypeNameContext>(0);
		}
		public StructTypeNameContext structTypeName() {
			return GetRuleContext<StructTypeNameContext>(0);
		}
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public GenericTypePartContext genericTypePart() {
			return GetRuleContext<GenericTypePartContext>(0);
		}
		public PossiblyGenericTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_possiblyGenericTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterPossiblyGenericTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitPossiblyGenericTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPossiblyGenericTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PossiblyGenericTypeNameContext possiblyGenericTypeName() {
		PossiblyGenericTypeNameContext _localctx = new PossiblyGenericTypeNameContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_possiblyGenericTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			switch (_input.La(1)) {
			case T__8:
				{
				State = 134; interfaceTypeName();
				}
				break;
			case T__9:
				{
				State = 135; structTypeName();
				}
				break;
			case LETTER:
				{
				State = 136; simpleTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 140;
			_la = _input.La(1);
			if (_la==T__10) {
				{
				State = 139; genericTypePart();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeNameContext : ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public EnumTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterEnumTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitEnumTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeNameContext enumTypeName() {
		EnumTypeNameContext _localctx = new EnumTypeNameContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_enumTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(T__7);
			State = 143; simpleTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeNameContext : ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public InterfaceTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterInterfaceTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitInterfaceTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeNameContext interfaceTypeName() {
		InterfaceTypeNameContext _localctx = new InterfaceTypeNameContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_interfaceTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(T__8);
			State = 146; simpleTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeNameContext : ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public StructTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterStructTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitStructTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeNameContext structTypeName() {
		StructTypeNameContext _localctx = new StructTypeNameContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_structTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(T__9);
			State = 149; simpleTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterSimpleTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitSimpleTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypePartContext : ParserRuleContext {
		public ITerminalNode POSNUM() { return GetToken(TypeNamingParser.POSNUM, 0); }
		public GenericParamContext[] genericParam() {
			return GetRuleContexts<GenericParamContext>();
		}
		public GenericParamContext genericParam(int i) {
			return GetRuleContext<GenericParamContext>(i);
		}
		public GenericTypePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypePart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterGenericTypePart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitGenericTypePart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypePart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypePartContext genericTypePart() {
		GenericTypePartContext _localctx = new GenericTypePartContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_genericTypePart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(T__10);
			State = 154; Match(POSNUM);
			State = 155; Match(T__11);
			State = 156; genericParam();
			State = 161;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__0) {
				{
				{
				State = 157; Match(T__0);
				State = 158; genericParam();
				}
				}
				State = 163;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 164; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParamContext : ParserRuleContext {
		public BoundTypeParameterContext boundTypeParameter() {
			return GetRuleContext<BoundTypeParameterContext>(0);
		}
		public GenericParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterGenericParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitGenericParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParamContext genericParam() {
		GenericParamContext _localctx = new GenericParamContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_genericParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(T__11);
			State = 167; boundTypeParameter();
			State = 168; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundTypeParameterContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public BoundTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterBoundTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitBoundTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoundTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoundTypeParameterContext boundTypeParameter() {
		BoundTypeParameterContext _localctx = new BoundTypeParameterContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_boundTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; typeParameter();
			State = 179;
			_la = _input.La(1);
			if (_la==T__13 || _la==WS) {
				{
				State = 172;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 171; Match(WS);
					}
				}

				State = 174; Match(T__13);
				State = 176;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 175; Match(WS);
					}
				}

				State = 178; type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public AssemblyVersionContext assemblyVersion() {
			return GetRuleContext<AssemblyVersionContext>(0);
		}
		public ITerminalNode WS() { return GetToken(TypeNamingParser.WS, 0); }
		public AssemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterAssembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitAssembly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyContext assembly() {
		AssemblyContext _localctx = new AssemblyContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_assembly);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; id();
			State = 187;
			_la = _input.La(1);
			if (_la==T__0) {
				{
				State = 182; Match(T__0);
				State = 184;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 183; Match(WS);
					}
				}

				State = 186; assemblyVersion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyVersionContext : ParserRuleContext {
		public NumContext[] num() {
			return GetRuleContexts<NumContext>();
		}
		public NumContext num(int i) {
			return GetRuleContext<NumContext>(i);
		}
		public AssemblyVersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyVersion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterAssemblyVersion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitAssemblyVersion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyVersionContext assemblyVersion() {
		AssemblyVersionContext _localctx = new AssemblyVersionContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_assemblyVersion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; num();
			State = 190; Match(T__6);
			State = 191; num();
			State = 192; Match(T__6);
			State = 193; num();
			State = 194; Match(T__6);
			State = 195; num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public RegularMethodContext regularMethod() {
			return GetRuleContext<RegularMethodContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_method);
		try {
			State = 199;
			switch (_input.La(1)) {
			case UNKNOWN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197; Match(UNKNOWN);
				}
				break;
			case T__11:
			case T__19:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198; regularMethod();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegularMethodContext : ParserRuleContext {
		public MethodParametersContext methodParameters() {
			return GetRuleContext<MethodParametersContext>(0);
		}
		public NonStaticCtorContext nonStaticCtor() {
			return GetRuleContext<NonStaticCtorContext>(0);
		}
		public StaticCctorContext staticCctor() {
			return GetRuleContext<StaticCctorContext>(0);
		}
		public CustomMethodContext customMethod() {
			return GetRuleContext<CustomMethodContext>(0);
		}
		public RegularMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regularMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterRegularMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitRegularMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegularMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegularMethodContext regularMethod() {
		RegularMethodContext _localctx = new RegularMethodContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_regularMethod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				State = 201; nonStaticCtor();
				}
				break;

			case 2:
				{
				State = 202; staticCctor();
				}
				break;

			case 3:
				{
				State = 203; customMethod();
				}
				break;
			}
			State = 206; methodParameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametersContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public FormalParamContext[] formalParam() {
			return GetRuleContexts<FormalParamContext>();
		}
		public FormalParamContext formalParam(int i) {
			return GetRuleContext<FormalParamContext>(i);
		}
		public MethodParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterMethodParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitMethodParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametersContext methodParameters() {
		MethodParametersContext _localctx = new MethodParametersContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_methodParameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(T__14);
			State = 210;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 209; Match(WS);
				}
				break;
			}
			State = 226;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 212; formalParam();
				State = 223;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 214;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 213; Match(WS);
							}
						}

						State = 216; Match(T__0);
						State = 218;
						switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
						case 1:
							{
							State = 217; Match(WS);
							}
							break;
						}
						State = 220; formalParam();
						}
						} 
					}
					State = 225;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
				}
				}
				break;
			}
			State = 229;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 228; Match(WS);
				}
			}

			State = 231; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonStaticCtorContext : ParserRuleContext {
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public NonStaticCtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonStaticCtor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNonStaticCtor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNonStaticCtor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonStaticCtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonStaticCtorContext nonStaticCtor() {
		NonStaticCtorContext _localctx = new NonStaticCtorContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_nonStaticCtor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 233; Match(WS);
				}
			}

			State = 236; Match(T__11);
			State = 237; Match(UNKNOWN);
			State = 238; Match(T__12);
			State = 240;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 239; Match(WS);
				}
			}

			State = 242; Match(T__11);
			State = 243; type();
			State = 244; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticCctorContext : ParserRuleContext {
		public StaticModifierContext staticModifier() {
			return GetRuleContext<StaticModifierContext>(0);
		}
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public StaticCctorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticCctor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterStaticCctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitStaticCctor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticCctor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticCctorContext staticCctor() {
		StaticCctorContext _localctx = new StaticCctorContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_staticCctor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; staticModifier();
			State = 248;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 247; Match(WS);
				}
			}

			State = 250; Match(T__11);
			State = 251; Match(UNKNOWN);
			State = 252; Match(T__12);
			State = 254;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 253; Match(WS);
				}
			}

			State = 256; Match(T__11);
			State = 257; type();
			State = 258; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomMethodContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public StaticModifierContext staticModifier() {
			return GetRuleContext<StaticModifierContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public GenericTypePartContext genericTypePart() {
			return GetRuleContext<GenericTypePartContext>(0);
		}
		public CustomMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterCustomMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitCustomMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomMethodContext customMethod() {
		CustomMethodContext _localctx = new CustomMethodContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_customMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			_la = _input.La(1);
			if (_la==T__19) {
				{
				State = 260; staticModifier();
				}
			}

			State = 264;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 263; Match(WS);
				}
			}

			State = 266; Match(T__11);
			State = 267; type();
			State = 268; Match(T__12);
			State = 270;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 269; Match(WS);
				}
			}

			State = 272; Match(T__11);
			State = 273; type();
			State = 274; Match(T__18);
			State = 275; id();
			State = 277;
			_la = _input.La(1);
			if (_la==T__10) {
				{
				State = 276; genericTypePart();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ParameterModifierContext parameterModifier() {
			return GetRuleContext<ParameterModifierContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public FormalParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterFormalParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitFormalParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamContext formalParam() {
		FormalParamContext _localctx = new FormalParamContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_formalParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 280;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 279; Match(WS);
					}
				}

				State = 282; parameterModifier();
				}
				break;
			}
			State = 286;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 285; Match(WS);
				}
			}

			State = 288; Match(T__11);
			State = 289; type();
			State = 290; Match(T__12);
			State = 292;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 291; Match(WS);
				}
			}

			State = 294; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParamsModifierContext paramsModifier() {
			return GetRuleContext<ParamsModifierContext>(0);
		}
		public OptsModifierContext optsModifier() {
			return GetRuleContext<OptsModifierContext>(0);
		}
		public RefModifierContext refModifier() {
			return GetRuleContext<RefModifierContext>(0);
		}
		public OutModifierContext outModifier() {
			return GetRuleContext<OutModifierContext>(0);
		}
		public ExtensionModifierContext extensionModifier() {
			return GetRuleContext<ExtensionModifierContext>(0);
		}
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_parameterModifier);
		try {
			State = 301;
			switch (_input.La(1)) {
			case T__20:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296; paramsModifier();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 297; optsModifier();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 3);
				{
				State = 298; refModifier();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 4);
				{
				State = 299; outModifier();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 5);
				{
				State = 300; extensionModifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticModifierContext : ParserRuleContext {
		public StaticModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterStaticModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitStaticModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticModifierContext staticModifier() {
		StaticModifierContext _localctx = new StaticModifierContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_staticModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsModifierContext : ParserRuleContext {
		public ParamsModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramsModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterParamsModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitParamsModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamsModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsModifierContext paramsModifier() {
		ParamsModifierContext _localctx = new ParamsModifierContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_paramsModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptsModifierContext : ParserRuleContext {
		public OptsModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optsModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterOptsModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitOptsModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptsModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptsModifierContext optsModifier() {
		OptsModifierContext _localctx = new OptsModifierContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_optsModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefModifierContext : ParserRuleContext {
		public RefModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterRefModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitRefModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefModifierContext refModifier() {
		RefModifierContext _localctx = new RefModifierContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_refModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutModifierContext : ParserRuleContext {
		public OutModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterOutModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitOutModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutModifierContext outModifier() {
		OutModifierContext _localctx = new OutModifierContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_outModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionModifierContext : ParserRuleContext {
		public ExtensionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterExtensionModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitExtensionModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionModifierContext extensionModifier() {
		ExtensionModifierContext _localctx = new ExtensionModifierContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_extensionModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode[] LETTER() { return GetTokens(TypeNamingParser.LETTER); }
		public ITerminalNode LETTER(int i) {
			return GetToken(TypeNamingParser.LETTER, i);
		}
		public NumContext[] num() {
			return GetRuleContexts<NumContext>();
		}
		public NumContext num(int i) {
			return GetRuleContext<NumContext>(i);
		}
		public ITerminalNode[] SIGN() { return GetTokens(TypeNamingParser.SIGN); }
		public ITerminalNode SIGN(int i) {
			return GetToken(TypeNamingParser.SIGN, i);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(LETTER);
			State = 321;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__25) | (1L << POSNUM) | (1L << LETTER) | (1L << SIGN))) != 0)) {
				{
				State = 319;
				switch (_input.La(1)) {
				case LETTER:
					{
					State = 316; Match(LETTER);
					}
					break;
				case T__25:
				case POSNUM:
					{
					State = 317; num();
					}
					break;
				case SIGN:
					{
					State = 318; Match(SIGN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 323;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public ITerminalNode POSNUM() { return GetToken(TypeNamingParser.POSNUM, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_num);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			_la = _input.La(1);
			if ( !(_la==T__25 || _la==POSNUM) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\"\x149\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x3\x2\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4Z\n\x4\x3\x5\x3\x5"+
		"\x3\x6\x3\x6\x5\x6`\n\x6\x3\x6\x3\x6\x5\x6\x64\n\x6\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x5"+
		"\nw\n\n\x3\v\x5\vz\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\x6\f\x81\n\f\r\f\xE\f"+
		"\x82\x3\r\x3\r\x5\r\x87\n\r\x3\xE\x3\xE\x3\xE\x5\xE\x8C\n\xE\x3\xE\x5"+
		"\xE\x8F\n\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\xA2\n\x13"+
		"\f\x13\xE\x13\xA5\v\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15"+
		"\x3\x15\x5\x15\xAF\n\x15\x3\x15\x3\x15\x5\x15\xB3\n\x15\x3\x15\x5\x15"+
		"\xB6\n\x15\x3\x16\x3\x16\x3\x16\x5\x16\xBB\n\x16\x3\x16\x5\x16\xBE\n\x16"+
		"\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18"+
		"\x5\x18\xCA\n\x18\x3\x19\x3\x19\x3\x19\x5\x19\xCF\n\x19\x3\x19\x3\x19"+
		"\x3\x1A\x3\x1A\x5\x1A\xD5\n\x1A\x3\x1A\x3\x1A\x5\x1A\xD9\n\x1A\x3\x1A"+
		"\x3\x1A\x5\x1A\xDD\n\x1A\x3\x1A\a\x1A\xE0\n\x1A\f\x1A\xE\x1A\xE3\v\x1A"+
		"\x5\x1A\xE5\n\x1A\x3\x1A\x5\x1A\xE8\n\x1A\x3\x1A\x3\x1A\x3\x1B\x5\x1B"+
		"\xED\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\xF3\n\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x5\x1C\xFB\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x5\x1C\x101\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x5\x1D\x108"+
		"\n\x1D\x3\x1D\x5\x1D\x10B\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x111"+
		"\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x118\n\x1D\x3\x1E\x5"+
		"\x1E\x11B\n\x1E\x3\x1E\x5\x1E\x11E\n\x1E\x3\x1E\x5\x1E\x121\n\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x127\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x5\x1F\x130\n\x1F\x3 \x3 \x3!\x3!\x3\"\x3\"\x3#\x3"+
		"#\x3$\x3$\x3%\x3%\x3&\x3&\x3&\x3&\a&\x142\n&\f&\xE&\x145\v&\x3\'\x3\'"+
		"\x3\'\x2\x2\x2(\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14"+
		"\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2"+
		"\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46"+
		"\x2H\x2J\x2L\x2\x2\x3\x4\x2\x1C\x1C\x1E\x1E\x151\x2N\x3\x2\x2\x2\x4Q\x3"+
		"\x2\x2\x2\x6Y\x3\x2\x2\x2\b[\x3\x2\x2\x2\n_\x3\x2\x2\x2\fg\x3\x2\x2\x2"+
		"\xEj\x3\x2\x2\x2\x10o\x3\x2\x2\x2\x12v\x3\x2\x2\x2\x14y\x3\x2\x2\x2\x16"+
		"\x80\x3\x2\x2\x2\x18\x86\x3\x2\x2\x2\x1A\x8B\x3\x2\x2\x2\x1C\x90\x3\x2"+
		"\x2\x2\x1E\x93\x3\x2\x2\x2 \x96\x3\x2\x2\x2\"\x99\x3\x2\x2\x2$\x9B\x3"+
		"\x2\x2\x2&\xA8\x3\x2\x2\x2(\xAC\x3\x2\x2\x2*\xB7\x3\x2\x2\x2,\xBF\x3\x2"+
		"\x2\x2.\xC9\x3\x2\x2\x2\x30\xCE\x3\x2\x2\x2\x32\xD2\x3\x2\x2\x2\x34\xEC"+
		"\x3\x2\x2\x2\x36\xF8\x3\x2\x2\x2\x38\x107\x3\x2\x2\x2:\x11D\x3\x2\x2\x2"+
		"<\x12F\x3\x2\x2\x2>\x131\x3\x2\x2\x2@\x133\x3\x2\x2\x2\x42\x135\x3\x2"+
		"\x2\x2\x44\x137\x3\x2\x2\x2\x46\x139\x3\x2\x2\x2H\x13B\x3\x2\x2\x2J\x13D"+
		"\x3\x2\x2\x2L\x146\x3\x2\x2\x2NO\x5\x6\x4\x2OP\a\"\x2\x2P\x3\x3\x2\x2"+
		"\x2QR\x5.\x18\x2RS\a\"\x2\x2S\x5\x3\x2\x2\x2TZ\a\x1D\x2\x2UZ\x5\b\x5\x2"+
		"VZ\x5\n\x6\x2WZ\x5\f\a\x2XZ\x5\xE\b\x2YT\x3\x2\x2\x2YU\x3\x2\x2\x2YV\x3"+
		"\x2\x2\x2YW\x3\x2\x2\x2YX\x3\x2\x2\x2Z\a\x3\x2\x2\x2[\\\x5J&\x2\\\t\x3"+
		"\x2\x2\x2]`\x5\x14\v\x2^`\x5\x10\t\x2_]\x3\x2\x2\x2_^\x3\x2\x2\x2`\x61"+
		"\x3\x2\x2\x2\x61\x63\a\x3\x2\x2\x62\x64\a!\x2\x2\x63\x62\x3\x2\x2\x2\x63"+
		"\x64\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\x66\x5*\x16\x2\x66\v\x3\x2\x2"+
		"\x2gh\a\x4\x2\x2hi\x5.\x18\x2i\r\x3\x2\x2\x2jk\a\x5\x2\x2kl\a\x1E\x2\x2"+
		"lm\a\x6\x2\x2mn\x5\x6\x4\x2n\xF\x3\x2\x2\x2op\a\a\x2\x2pq\x5\x12\n\x2"+
		"qr\a\b\x2\x2rs\x5\x18\r\x2s\x11\x3\x2\x2\x2tw\x5\x10\t\x2uw\x5\x14\v\x2"+
		"vt\x3\x2\x2\x2vu\x3\x2\x2\x2w\x13\x3\x2\x2\x2xz\x5\x16\f\x2yx\x3\x2\x2"+
		"\x2yz\x3\x2\x2\x2z{\x3\x2\x2\x2{|\x5\x18\r\x2|\x15\x3\x2\x2\x2}~\x5J&"+
		"\x2~\x7F\a\t\x2\x2\x7F\x81\x3\x2\x2\x2\x80}\x3\x2\x2\x2\x81\x82\x3\x2"+
		"\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x17\x3\x2\x2\x2\x84"+
		"\x87\x5\x1C\xF\x2\x85\x87\x5\x1A\xE\x2\x86\x84\x3\x2\x2\x2\x86\x85\x3"+
		"\x2\x2\x2\x87\x19\x3\x2\x2\x2\x88\x8C\x5\x1E\x10\x2\x89\x8C\x5 \x11\x2"+
		"\x8A\x8C\x5\"\x12\x2\x8B\x88\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8A\x3"+
		"\x2\x2\x2\x8C\x8E\x3\x2\x2\x2\x8D\x8F\x5$\x13\x2\x8E\x8D\x3\x2\x2\x2\x8E"+
		"\x8F\x3\x2\x2\x2\x8F\x1B\x3\x2\x2\x2\x90\x91\a\n\x2\x2\x91\x92\x5\"\x12"+
		"\x2\x92\x1D\x3\x2\x2\x2\x93\x94\a\v\x2\x2\x94\x95\x5\"\x12\x2\x95\x1F"+
		"\x3\x2\x2\x2\x96\x97\a\f\x2\x2\x97\x98\x5\"\x12\x2\x98!\x3\x2\x2\x2\x99"+
		"\x9A\x5J&\x2\x9A#\x3\x2\x2\x2\x9B\x9C\a\r\x2\x2\x9C\x9D\a\x1E\x2\x2\x9D"+
		"\x9E\a\xE\x2\x2\x9E\xA3\x5&\x14\x2\x9F\xA0\a\x3\x2\x2\xA0\xA2\x5&\x14"+
		"\x2\xA1\x9F\x3\x2\x2\x2\xA2\xA5\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA3\xA4"+
		"\x3\x2\x2\x2\xA4\xA6\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA6\xA7\a\xF\x2\x2"+
		"\xA7%\x3\x2\x2\x2\xA8\xA9\a\xE\x2\x2\xA9\xAA\x5(\x15\x2\xAA\xAB\a\xF\x2"+
		"\x2\xAB\'\x3\x2\x2\x2\xAC\xB5\x5\b\x5\x2\xAD\xAF\a!\x2\x2\xAE\xAD\x3\x2"+
		"\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB2\a\x10\x2\x2\xB1"+
		"\xB3\a!\x2\x2\xB2\xB1\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB4\x3\x2\x2"+
		"\x2\xB4\xB6\x5\x6\x4\x2\xB5\xAE\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6)\x3"+
		"\x2\x2\x2\xB7\xBD\x5J&\x2\xB8\xBA\a\x3\x2\x2\xB9\xBB\a!\x2\x2\xBA\xB9"+
		"\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBE\x5,\x17\x2"+
		"\xBD\xB8\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE+\x3\x2\x2\x2\xBF\xC0\x5L"+
		"\'\x2\xC0\xC1\a\t\x2\x2\xC1\xC2\x5L\'\x2\xC2\xC3\a\t\x2\x2\xC3\xC4\x5"+
		"L\'\x2\xC4\xC5\a\t\x2\x2\xC5\xC6\x5L\'\x2\xC6-\x3\x2\x2\x2\xC7\xCA\a\x1D"+
		"\x2\x2\xC8\xCA\x5\x30\x19\x2\xC9\xC7\x3\x2\x2\x2\xC9\xC8\x3\x2\x2\x2\xCA"+
		"/\x3\x2\x2\x2\xCB\xCF\x5\x34\x1B\x2\xCC\xCF\x5\x36\x1C\x2\xCD\xCF\x5\x38"+
		"\x1D\x2\xCE\xCB\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCD\x3\x2\x2\x2\xCF"+
		"\xD0\x3\x2\x2\x2\xD0\xD1\x5\x32\x1A\x2\xD1\x31\x3\x2\x2\x2\xD2\xD4\a\x11"+
		"\x2\x2\xD3\xD5\a!\x2\x2\xD4\xD3\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xE4"+
		"\x3\x2\x2\x2\xD6\xE1\x5:\x1E\x2\xD7\xD9\a!\x2\x2\xD8\xD7\x3\x2\x2\x2\xD8"+
		"\xD9\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xDC\a\x3\x2\x2\xDB\xDD\a!\x2"+
		"\x2\xDC\xDB\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xE0"+
		"\x5:\x1E\x2\xDF\xD8\x3\x2\x2\x2\xE0\xE3\x3\x2\x2\x2\xE1\xDF\x3\x2\x2\x2"+
		"\xE1\xE2\x3\x2\x2\x2\xE2\xE5\x3\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE4\xD6\x3"+
		"\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE7\x3\x2\x2\x2\xE6\xE8\a!\x2\x2\xE7"+
		"\xE6\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xEA\a\x12"+
		"\x2\x2\xEA\x33\x3\x2\x2\x2\xEB\xED\a!\x2\x2\xEC\xEB\x3\x2\x2\x2\xEC\xED"+
		"\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xEF\a\xE\x2\x2\xEF\xF0\a\x1D\x2\x2"+
		"\xF0\xF2\a\xF\x2\x2\xF1\xF3\a!\x2\x2\xF2\xF1\x3\x2\x2\x2\xF2\xF3\x3\x2"+
		"\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF5\a\xE\x2\x2\xF5\xF6\x5\x6\x4\x2\xF6"+
		"\xF7\a\x13\x2\x2\xF7\x35\x3\x2\x2\x2\xF8\xFA\x5> \x2\xF9\xFB\a!\x2\x2"+
		"\xFA\xF9\x3\x2\x2\x2\xFA\xFB\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\xFD\a"+
		"\xE\x2\x2\xFD\xFE\a\x1D\x2\x2\xFE\x100\a\xF\x2\x2\xFF\x101\a!\x2\x2\x100"+
		"\xFF\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x103"+
		"\a\xE\x2\x2\x103\x104\x5\x6\x4\x2\x104\x105\a\x14\x2\x2\x105\x37\x3\x2"+
		"\x2\x2\x106\x108\x5> \x2\x107\x106\x3\x2\x2\x2\x107\x108\x3\x2\x2\x2\x108"+
		"\x10A\x3\x2\x2\x2\x109\x10B\a!\x2\x2\x10A\x109\x3\x2\x2\x2\x10A\x10B\x3"+
		"\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10D\a\xE\x2\x2\x10D\x10E\x5\x6\x4"+
		"\x2\x10E\x110\a\xF\x2\x2\x10F\x111\a!\x2\x2\x110\x10F\x3\x2\x2\x2\x110"+
		"\x111\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x113\a\xE\x2\x2\x113\x114"+
		"\x5\x6\x4\x2\x114\x115\a\x15\x2\x2\x115\x117\x5J&\x2\x116\x118\x5$\x13"+
		"\x2\x117\x116\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118\x39\x3\x2\x2\x2\x119"+
		"\x11B\a!\x2\x2\x11A\x119\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11B\x11C\x3"+
		"\x2\x2\x2\x11C\x11E\x5<\x1F\x2\x11D\x11A\x3\x2\x2\x2\x11D\x11E\x3\x2\x2"+
		"\x2\x11E\x120\x3\x2\x2\x2\x11F\x121\a!\x2\x2\x120\x11F\x3\x2\x2\x2\x120"+
		"\x121\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\x123\a\xE\x2\x2\x123\x124"+
		"\x5\x6\x4\x2\x124\x126\a\xF\x2\x2\x125\x127\a!\x2\x2\x126\x125\x3\x2\x2"+
		"\x2\x126\x127\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x129\x5J&\x2\x129"+
		";\x3\x2\x2\x2\x12A\x130\x5@!\x2\x12B\x130\x5\x42\"\x2\x12C\x130\x5\x44"+
		"#\x2\x12D\x130\x5\x46$\x2\x12E\x130\x5H%\x2\x12F\x12A\x3\x2\x2\x2\x12F"+
		"\x12B\x3\x2\x2\x2\x12F\x12C\x3\x2\x2\x2\x12F\x12D\x3\x2\x2\x2\x12F\x12E"+
		"\x3\x2\x2\x2\x130=\x3\x2\x2\x2\x131\x132\a\x16\x2\x2\x132?\x3\x2\x2\x2"+
		"\x133\x134\a\x17\x2\x2\x134\x41\x3\x2\x2\x2\x135\x136\a\x18\x2\x2\x136"+
		"\x43\x3\x2\x2\x2\x137\x138\a\x19\x2\x2\x138\x45\x3\x2\x2\x2\x139\x13A"+
		"\a\x1A\x2\x2\x13AG\x3\x2\x2\x2\x13B\x13C\a\x1B\x2\x2\x13CI\x3\x2\x2\x2"+
		"\x13D\x143\a\x1F\x2\x2\x13E\x142\a\x1F\x2\x2\x13F\x142\x5L\'\x2\x140\x142"+
		"\a \x2\x2\x141\x13E\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2\x141\x140\x3\x2"+
		"\x2\x2\x142\x145\x3\x2\x2\x2\x143\x141\x3\x2\x2\x2\x143\x144\x3\x2\x2"+
		"\x2\x144K\x3\x2\x2\x2\x145\x143\x3\x2\x2\x2\x146\x147\t\x2\x2\x2\x147"+
		"M\x3\x2\x2\x2(Y_\x63vy\x82\x86\x8B\x8E\xA3\xAE\xB2\xB5\xBA\xBD\xC9\xCE"+
		"\xD4\xD8\xDC\xE1\xE4\xE7\xEC\xF2\xFA\x100\x107\x10A\x110\x117\x11A\x11D"+
		"\x120\x126\x12F\x141\x143";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace KaVE.Commons.Model.Names.CSharp.Parser
