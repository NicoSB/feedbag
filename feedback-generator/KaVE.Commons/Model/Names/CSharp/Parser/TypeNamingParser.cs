//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jonas\Documents\Visual Studio 2013\Projects\Grammar\Grammar\TypeNaming.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KaVE.Commons.Model.Names.CSharp.Parser
{

/**
 * Copyright 2016 Sebastian Proksch
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class TypeNamingParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, UNKNOWN=27, POSNUM=28, LETTER=29, SIGN=30, WS=31, 
		EOL=32;
	public const int
		RULE_typeEOL = 0, RULE_methodEOL = 1, RULE_type = 2, RULE_typeParameter = 3, 
		RULE_notTypeParameter = 4, RULE_regularType = 5, RULE_delegateType = 6, 
		RULE_arrayType = 7, RULE_nestedType = 8, RULE_nestedTypeName = 9, RULE_resolvedType = 10, 
		RULE_namespace = 11, RULE_typeName = 12, RULE_possiblyGenericTypeName = 13, 
		RULE_enumTypeName = 14, RULE_interfaceTypeName = 15, RULE_structTypeName = 16, 
		RULE_simpleTypeName = 17, RULE_genericTypePart = 18, RULE_genericParam = 19, 
		RULE_assembly = 20, RULE_assemblyVersion = 21, RULE_method = 22, RULE_regularMethod = 23, 
		RULE_methodParameters = 24, RULE_nonStaticCtor = 25, RULE_staticCctor = 26, 
		RULE_customMethod = 27, RULE_formalParam = 28, RULE_staticModifier = 29, 
		RULE_id = 30, RULE_num = 31;
	public static readonly string[] ruleNames = {
		"typeEOL", "methodEOL", "type", "typeParameter", "notTypeParameter", "regularType", 
		"delegateType", "arrayType", "nestedType", "nestedTypeName", "resolvedType", 
		"namespace", "typeName", "possiblyGenericTypeName", "enumTypeName", "interfaceTypeName", 
		"structTypeName", "simpleTypeName", "genericTypePart", "genericParam", 
		"assembly", "assemblyVersion", "method", "regularMethod", "methodParameters", 
		"nonStaticCtor", "staticCctor", "customMethod", "formalParam", "staticModifier", 
		"id", "num"
	};

	private static readonly string[] _LiteralNames = {
		null, "'->'", "','", "'d:'", "'arr('", "'):'", "'n:'", "'+'", "'.'", "'e:'", 
		"'i:'", "'s:'", "'''", "'['", "']'", "'('", "')'", "']..ctor'", "']..cctor'", 
		"'].'", "'params '", "'opt '", "'ref '", "'out '", "'this '", "'static'", 
		"'0'", "'?'", null, null, null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "UNKNOWN", "POSNUM", "LETTER", "SIGN", "WS", "EOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TypeNaming.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TypeNamingParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class TypeEOLContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(TypeNamingParser.EOL, 0); }
		public TypeEOLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeEOL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterTypeEOL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitTypeEOL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeEOL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeEOLContext typeEOL() {
		TypeEOLContext _localctx = new TypeEOLContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_typeEOL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; type();
			State = 65; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodEOLContext : ParserRuleContext {
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(TypeNamingParser.EOL, 0); }
		public MethodEOLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodEOL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterMethodEOL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitMethodEOL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodEOL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodEOLContext methodEOL() {
		MethodEOLContext _localctx = new MethodEOLContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_methodEOL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; method();
			State = 68; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public RegularTypeContext regularType() {
			return GetRuleContext<RegularTypeContext>(0);
		}
		public DelegateTypeContext delegateType() {
			return GetRuleContext<DelegateTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_type);
		try {
			State = 75;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; Match(UNKNOWN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; typeParameter();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 72; regularType();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 73; delegateType();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 74; arrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NotTypeParameterContext notTypeParameter() {
			return GetRuleContext<NotTypeParameterContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; id();
			State = 86;
			_la = _input.La(1);
			if (_la==T__0 || _la==WS) {
				{
				State = 79;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 78; Match(WS);
					}
				}

				State = 81; Match(T__0);
				State = 83;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 82; Match(WS);
					}
				}

				State = 85; notTypeParameter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotTypeParameterContext : ParserRuleContext {
		public RegularTypeContext regularType() {
			return GetRuleContext<RegularTypeContext>(0);
		}
		public DelegateTypeContext delegateType() {
			return GetRuleContext<DelegateTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NotTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNotTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNotTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotTypeParameterContext notTypeParameter() {
		NotTypeParameterContext _localctx = new NotTypeParameterContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_notTypeParameter);
		try {
			State = 93;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; regularType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; delegateType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 90; arrayType();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 91; Match(UNKNOWN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 92; id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegularTypeContext : ParserRuleContext {
		public AssemblyContext assembly() {
			return GetRuleContext<AssemblyContext>(0);
		}
		public ResolvedTypeContext resolvedType() {
			return GetRuleContext<ResolvedTypeContext>(0);
		}
		public NestedTypeContext nestedType() {
			return GetRuleContext<NestedTypeContext>(0);
		}
		public ITerminalNode WS() { return GetToken(TypeNamingParser.WS, 0); }
		public RegularTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regularType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterRegularType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitRegularType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegularType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegularTypeContext regularType() {
		RegularTypeContext _localctx = new RegularTypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_regularType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			switch (_input.La(1)) {
			case T__8:
			case T__9:
			case T__10:
			case LETTER:
				{
				State = 95; resolvedType();
				}
				break;
			case T__5:
				{
				State = 96; nestedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 99; Match(T__1);
			State = 101;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 100; Match(WS);
				}
			}

			State = 103; assembly();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateTypeContext : ParserRuleContext {
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public DelegateTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterDelegateType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitDelegateType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateTypeContext delegateType() {
		DelegateTypeContext _localctx = new DelegateTypeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_delegateType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(T__2);
			State = 106; method();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public ITerminalNode POSNUM() { return GetToken(TypeNamingParser.POSNUM, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(T__3);
			State = 109; Match(POSNUM);
			State = 110; Match(T__4);
			State = 111; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedTypeContext : ParserRuleContext {
		public NestedTypeNameContext nestedTypeName() {
			return GetRuleContext<NestedTypeNameContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NestedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNestedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNestedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedTypeContext nestedType() {
		NestedTypeContext _localctx = new NestedTypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_nestedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(T__5);
			State = 114; nestedTypeName();
			State = 115; Match(T__6);
			State = 116; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedTypeNameContext : ParserRuleContext {
		public NestedTypeContext nestedType() {
			return GetRuleContext<NestedTypeContext>(0);
		}
		public ResolvedTypeContext resolvedType() {
			return GetRuleContext<ResolvedTypeContext>(0);
		}
		public NestedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNestedTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNestedTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedTypeNameContext nestedTypeName() {
		NestedTypeNameContext _localctx = new NestedTypeNameContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_nestedTypeName);
		try {
			State = 120;
			switch (_input.La(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; nestedType();
				}
				break;
			case T__8:
			case T__9:
			case T__10:
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119; resolvedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResolvedTypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public ResolvedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resolvedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterResolvedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitResolvedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResolvedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResolvedTypeContext resolvedType() {
		ResolvedTypeContext _localctx = new ResolvedTypeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_resolvedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 122; @namespace();
				}
				break;
			}
			State = 125; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_namespace);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 127; id();
					State = 128; Match(T__7);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 132;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		public PossiblyGenericTypeNameContext possiblyGenericTypeName() {
			return GetRuleContext<PossiblyGenericTypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_typeName);
		try {
			State = 136;
			switch (_input.La(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134; enumTypeName();
				}
				break;
			case T__9:
			case T__10:
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135; possiblyGenericTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PossiblyGenericTypeNameContext : ParserRuleContext {
		public InterfaceTypeNameContext interfaceTypeName() {
			return GetRuleContext<InterfaceTypeNameContext>(0);
		}
		public StructTypeNameContext structTypeName() {
			return GetRuleContext<StructTypeNameContext>(0);
		}
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public GenericTypePartContext genericTypePart() {
			return GetRuleContext<GenericTypePartContext>(0);
		}
		public PossiblyGenericTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_possiblyGenericTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterPossiblyGenericTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitPossiblyGenericTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPossiblyGenericTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PossiblyGenericTypeNameContext possiblyGenericTypeName() {
		PossiblyGenericTypeNameContext _localctx = new PossiblyGenericTypeNameContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_possiblyGenericTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			switch (_input.La(1)) {
			case T__9:
				{
				State = 138; interfaceTypeName();
				}
				break;
			case T__10:
				{
				State = 139; structTypeName();
				}
				break;
			case LETTER:
				{
				State = 140; simpleTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 144;
			_la = _input.La(1);
			if (_la==T__11) {
				{
				State = 143; genericTypePart();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeNameContext : ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public EnumTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterEnumTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitEnumTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeNameContext enumTypeName() {
		EnumTypeNameContext _localctx = new EnumTypeNameContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_enumTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(T__8);
			State = 147; simpleTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeNameContext : ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public InterfaceTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterInterfaceTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitInterfaceTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeNameContext interfaceTypeName() {
		InterfaceTypeNameContext _localctx = new InterfaceTypeNameContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_interfaceTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(T__9);
			State = 150; simpleTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeNameContext : ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public StructTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterStructTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitStructTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeNameContext structTypeName() {
		StructTypeNameContext _localctx = new StructTypeNameContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_structTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(T__10);
			State = 153; simpleTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterSimpleTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitSimpleTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypePartContext : ParserRuleContext {
		public ITerminalNode POSNUM() { return GetToken(TypeNamingParser.POSNUM, 0); }
		public GenericParamContext[] genericParam() {
			return GetRuleContexts<GenericParamContext>();
		}
		public GenericParamContext genericParam(int i) {
			return GetRuleContext<GenericParamContext>(i);
		}
		public GenericTypePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypePart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterGenericTypePart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitGenericTypePart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypePart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypePartContext genericTypePart() {
		GenericTypePartContext _localctx = new GenericTypePartContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_genericTypePart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(T__11);
			State = 158; Match(POSNUM);
			State = 159; Match(T__12);
			State = 160; genericParam();
			State = 165;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 161; Match(T__1);
				State = 162; genericParam();
				}
				}
				State = 167;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 168; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParamContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public GenericParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterGenericParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitGenericParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParamContext genericParam() {
		GenericParamContext _localctx = new GenericParamContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_genericParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(T__12);
			State = 171; typeParameter();
			State = 172; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public AssemblyVersionContext assemblyVersion() {
			return GetRuleContext<AssemblyVersionContext>(0);
		}
		public ITerminalNode WS() { return GetToken(TypeNamingParser.WS, 0); }
		public AssemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterAssembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitAssembly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyContext assembly() {
		AssemblyContext _localctx = new AssemblyContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_assembly);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 174; id();
					State = 175; Match(T__7);
					}
					} 
				}
				State = 181;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			}
			State = 182; id();
			State = 188;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 183; Match(T__1);
				State = 185;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 184; Match(WS);
					}
				}

				State = 187; assemblyVersion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyVersionContext : ParserRuleContext {
		public NumContext[] num() {
			return GetRuleContexts<NumContext>();
		}
		public NumContext num(int i) {
			return GetRuleContext<NumContext>(i);
		}
		public AssemblyVersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyVersion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterAssemblyVersion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitAssemblyVersion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyVersionContext assemblyVersion() {
		AssemblyVersionContext _localctx = new AssemblyVersionContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_assemblyVersion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; num();
			State = 191; Match(T__7);
			State = 192; num();
			State = 193; Match(T__7);
			State = 194; num();
			State = 195; Match(T__7);
			State = 196; num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public RegularMethodContext regularMethod() {
			return GetRuleContext<RegularMethodContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_method);
		try {
			State = 200;
			switch (_input.La(1)) {
			case UNKNOWN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198; Match(UNKNOWN);
				}
				break;
			case T__12:
			case T__24:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; regularMethod();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegularMethodContext : ParserRuleContext {
		public MethodParametersContext methodParameters() {
			return GetRuleContext<MethodParametersContext>(0);
		}
		public NonStaticCtorContext nonStaticCtor() {
			return GetRuleContext<NonStaticCtorContext>(0);
		}
		public StaticCctorContext staticCctor() {
			return GetRuleContext<StaticCctorContext>(0);
		}
		public CustomMethodContext customMethod() {
			return GetRuleContext<CustomMethodContext>(0);
		}
		public RegularMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regularMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterRegularMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitRegularMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegularMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegularMethodContext regularMethod() {
		RegularMethodContext _localctx = new RegularMethodContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_regularMethod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				State = 202; nonStaticCtor();
				}
				break;

			case 2:
				{
				State = 203; staticCctor();
				}
				break;

			case 3:
				{
				State = 204; customMethod();
				}
				break;
			}
			State = 207; methodParameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametersContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public FormalParamContext[] formalParam() {
			return GetRuleContexts<FormalParamContext>();
		}
		public FormalParamContext formalParam(int i) {
			return GetRuleContext<FormalParamContext>(i);
		}
		public MethodParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterMethodParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitMethodParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametersContext methodParameters() {
		MethodParametersContext _localctx = new MethodParametersContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_methodParameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(T__14);
			State = 211;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				{
				State = 210; Match(WS);
				}
				break;
			}
			State = 227;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 213; formalParam();
				State = 224;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 215;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 214; Match(WS);
							}
						}

						State = 217; Match(T__1);
						State = 219;
						switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
						case 1:
							{
							State = 218; Match(WS);
							}
							break;
						}
						State = 221; formalParam();
						}
						} 
					}
					State = 226;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
				}
				}
				break;
			}
			State = 230;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 229; Match(WS);
				}
			}

			State = 232; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonStaticCtorContext : ParserRuleContext {
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public NonStaticCtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonStaticCtor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNonStaticCtor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNonStaticCtor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonStaticCtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonStaticCtorContext nonStaticCtor() {
		NonStaticCtorContext _localctx = new NonStaticCtorContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_nonStaticCtor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 234; Match(WS);
				}
			}

			State = 237; Match(T__12);
			State = 238; Match(UNKNOWN);
			State = 239; Match(T__13);
			State = 241;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 240; Match(WS);
				}
			}

			State = 243; Match(T__12);
			State = 244; type();
			State = 245; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticCctorContext : ParserRuleContext {
		public StaticModifierContext staticModifier() {
			return GetRuleContext<StaticModifierContext>(0);
		}
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public StaticCctorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticCctor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterStaticCctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitStaticCctor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticCctor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticCctorContext staticCctor() {
		StaticCctorContext _localctx = new StaticCctorContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_staticCctor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; staticModifier();
			State = 249;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 248; Match(WS);
				}
			}

			State = 251; Match(T__12);
			State = 252; Match(UNKNOWN);
			State = 253; Match(T__13);
			State = 255;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 254; Match(WS);
				}
			}

			State = 257; Match(T__12);
			State = 258; type();
			State = 259; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomMethodContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public StaticModifierContext staticModifier() {
			return GetRuleContext<StaticModifierContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public GenericTypePartContext genericTypePart() {
			return GetRuleContext<GenericTypePartContext>(0);
		}
		public CustomMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterCustomMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitCustomMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomMethodContext customMethod() {
		CustomMethodContext _localctx = new CustomMethodContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_customMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			_la = _input.La(1);
			if (_la==T__24) {
				{
				State = 261; staticModifier();
				}
			}

			State = 265;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 264; Match(WS);
				}
			}

			State = 267; Match(T__12);
			State = 268; type();
			State = 269; Match(T__13);
			State = 271;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 270; Match(WS);
				}
			}

			State = 273; Match(T__12);
			State = 274; type();
			State = 275; Match(T__18);
			State = 276; id();
			State = 278;
			_la = _input.La(1);
			if (_la==T__11) {
				{
				State = 277; genericTypePart();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public FormalParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterFormalParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitFormalParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamContext formalParam() {
		FormalParamContext _localctx = new FormalParamContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_formalParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 281;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 280; Match(WS);
					}
				}

				State = 283; Match(T__19);
				}
				break;

			case 2:
				{
				State = 284; Match(T__20);
				}
				break;

			case 3:
				{
				State = 285; Match(T__21);
				}
				break;

			case 4:
				{
				State = 286; Match(T__22);
				}
				break;

			case 5:
				{
				State = 287; Match(T__23);
				}
				break;
			}
			State = 291;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 290; Match(WS);
				}
			}

			State = 293; Match(T__12);
			State = 294; type();
			State = 295; Match(T__13);
			State = 297;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 296; Match(WS);
				}
			}

			State = 299; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticModifierContext : ParserRuleContext {
		public StaticModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterStaticModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitStaticModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticModifierContext staticModifier() {
		StaticModifierContext _localctx = new StaticModifierContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_staticModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode[] LETTER() { return GetTokens(TypeNamingParser.LETTER); }
		public ITerminalNode LETTER(int i) {
			return GetToken(TypeNamingParser.LETTER, i);
		}
		public NumContext[] num() {
			return GetRuleContexts<NumContext>();
		}
		public NumContext num(int i) {
			return GetRuleContext<NumContext>(i);
		}
		public ITerminalNode[] SIGN() { return GetTokens(TypeNamingParser.SIGN); }
		public ITerminalNode SIGN(int i) {
			return GetToken(TypeNamingParser.SIGN, i);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(LETTER);
			State = 309;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__25) | (1L << POSNUM) | (1L << LETTER) | (1L << SIGN))) != 0)) {
				{
				State = 307;
				switch (_input.La(1)) {
				case LETTER:
					{
					State = 304; Match(LETTER);
					}
					break;
				case T__25:
				case POSNUM:
					{
					State = 305; num();
					}
					break;
				case SIGN:
					{
					State = 306; Match(SIGN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 311;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public ITerminalNode POSNUM() { return GetToken(TypeNamingParser.POSNUM, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_num);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			_la = _input.La(1);
			if ( !(_la==T__25 || _la==POSNUM) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\"\x13D\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x5\x4N\n\x4\x3\x5\x3\x5\x5\x5R\n\x5\x3\x5\x3\x5\x5\x5V\n\x5\x3\x5\x5"+
		"\x5Y\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6`\n\x6\x3\a\x3\a\x5\a\x64"+
		"\n\a\x3\a\x3\a\x5\ah\n\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x5\v{\n\v\x3\f\x5\f~\n\f\x3\f"+
		"\x3\f\x3\r\x3\r\x3\r\x6\r\x85\n\r\r\r\xE\r\x86\x3\xE\x3\xE\x5\xE\x8B\n"+
		"\xE\x3\xF\x3\xF\x3\xF\x5\xF\x90\n\xF\x3\xF\x5\xF\x93\n\xF\x3\x10\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\xA6\n\x14\f\x14\xE\x14\xA9\v"+
		"\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\a"+
		"\x16\xB4\n\x16\f\x16\xE\x16\xB7\v\x16\x3\x16\x3\x16\x3\x16\x5\x16\xBC"+
		"\n\x16\x3\x16\x5\x16\xBF\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\xCB\n\x18\x3\x19\x3\x19\x3\x19\x5"+
		"\x19\xD0\n\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x5\x1A\xD6\n\x1A\x3\x1A\x3"+
		"\x1A\x5\x1A\xDA\n\x1A\x3\x1A\x3\x1A\x5\x1A\xDE\n\x1A\x3\x1A\a\x1A\xE1"+
		"\n\x1A\f\x1A\xE\x1A\xE4\v\x1A\x5\x1A\xE6\n\x1A\x3\x1A\x5\x1A\xE9\n\x1A"+
		"\x3\x1A\x3\x1A\x3\x1B\x5\x1B\xEE\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5"+
		"\x1B\xF4\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x5\x1C\xFC\n"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x102\n\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1D\x5\x1D\x109\n\x1D\x3\x1D\x5\x1D\x10C\n\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x5\x1D\x112\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5"+
		"\x1D\x119\n\x1D\x3\x1E\x5\x1E\x11C\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x5\x1E\x123\n\x1E\x3\x1E\x5\x1E\x126\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x5\x1E\x12C\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \a "+
		"\x136\n \f \xE \x139\v \x3!\x3!\x3!\x2\x2\x2\"\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x2\x3\x4\x2\x1C\x1C\x1E\x1E\x150\x2\x42\x3\x2\x2\x2\x4"+
		"\x45\x3\x2\x2\x2\x6M\x3\x2\x2\x2\bO\x3\x2\x2\x2\n_\x3\x2\x2\x2\f\x63\x3"+
		"\x2\x2\x2\xEk\x3\x2\x2\x2\x10n\x3\x2\x2\x2\x12s\x3\x2\x2\x2\x14z\x3\x2"+
		"\x2\x2\x16}\x3\x2\x2\x2\x18\x84\x3\x2\x2\x2\x1A\x8A\x3\x2\x2\x2\x1C\x8F"+
		"\x3\x2\x2\x2\x1E\x94\x3\x2\x2\x2 \x97\x3\x2\x2\x2\"\x9A\x3\x2\x2\x2$\x9D"+
		"\x3\x2\x2\x2&\x9F\x3\x2\x2\x2(\xAC\x3\x2\x2\x2*\xB5\x3\x2\x2\x2,\xC0\x3"+
		"\x2\x2\x2.\xCA\x3\x2\x2\x2\x30\xCF\x3\x2\x2\x2\x32\xD3\x3\x2\x2\x2\x34"+
		"\xED\x3\x2\x2\x2\x36\xF9\x3\x2\x2\x2\x38\x108\x3\x2\x2\x2:\x122\x3\x2"+
		"\x2\x2<\x12F\x3\x2\x2\x2>\x131\x3\x2\x2\x2@\x13A\x3\x2\x2\x2\x42\x43\x5"+
		"\x6\x4\x2\x43\x44\a\"\x2\x2\x44\x3\x3\x2\x2\x2\x45\x46\x5.\x18\x2\x46"+
		"G\a\"\x2\x2G\x5\x3\x2\x2\x2HN\a\x1D\x2\x2IN\x5\b\x5\x2JN\x5\f\a\x2KN\x5"+
		"\xE\b\x2LN\x5\x10\t\x2MH\x3\x2\x2\x2MI\x3\x2\x2\x2MJ\x3\x2\x2\x2MK\x3"+
		"\x2\x2\x2ML\x3\x2\x2\x2N\a\x3\x2\x2\x2OX\x5> \x2PR\a!\x2\x2QP\x3\x2\x2"+
		"\x2QR\x3\x2\x2\x2RS\x3\x2\x2\x2SU\a\x3\x2\x2TV\a!\x2\x2UT\x3\x2\x2\x2"+
		"UV\x3\x2\x2\x2VW\x3\x2\x2\x2WY\x5\n\x6\x2XQ\x3\x2\x2\x2XY\x3\x2\x2\x2"+
		"Y\t\x3\x2\x2\x2Z`\x5\f\a\x2[`\x5\xE\b\x2\\`\x5\x10\t\x2]`\a\x1D\x2\x2"+
		"^`\x5> \x2_Z\x3\x2\x2\x2_[\x3\x2\x2\x2_\\\x3\x2\x2\x2_]\x3\x2\x2\x2_^"+
		"\x3\x2\x2\x2`\v\x3\x2\x2\x2\x61\x64\x5\x16\f\x2\x62\x64\x5\x12\n\x2\x63"+
		"\x61\x3\x2\x2\x2\x63\x62\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65g\a\x4\x2"+
		"\x2\x66h\a!\x2\x2g\x66\x3\x2\x2\x2gh\x3\x2\x2\x2hi\x3\x2\x2\x2ij\x5*\x16"+
		"\x2j\r\x3\x2\x2\x2kl\a\x5\x2\x2lm\x5.\x18\x2m\xF\x3\x2\x2\x2no\a\x6\x2"+
		"\x2op\a\x1E\x2\x2pq\a\a\x2\x2qr\x5\x6\x4\x2r\x11\x3\x2\x2\x2st\a\b\x2"+
		"\x2tu\x5\x14\v\x2uv\a\t\x2\x2vw\x5\x1A\xE\x2w\x13\x3\x2\x2\x2x{\x5\x12"+
		"\n\x2y{\x5\x16\f\x2zx\x3\x2\x2\x2zy\x3\x2\x2\x2{\x15\x3\x2\x2\x2|~\x5"+
		"\x18\r\x2}|\x3\x2\x2\x2}~\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x80\x5\x1A"+
		"\xE\x2\x80\x17\x3\x2\x2\x2\x81\x82\x5> \x2\x82\x83\a\n\x2\x2\x83\x85\x3"+
		"\x2\x2\x2\x84\x81\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x84\x3\x2\x2\x2"+
		"\x86\x87\x3\x2\x2\x2\x87\x19\x3\x2\x2\x2\x88\x8B\x5\x1E\x10\x2\x89\x8B"+
		"\x5\x1C\xF\x2\x8A\x88\x3\x2\x2\x2\x8A\x89\x3\x2\x2\x2\x8B\x1B\x3\x2\x2"+
		"\x2\x8C\x90\x5 \x11\x2\x8D\x90\x5\"\x12\x2\x8E\x90\x5$\x13\x2\x8F\x8C"+
		"\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x8F\x8E\x3\x2\x2\x2\x90\x92\x3\x2\x2"+
		"\x2\x91\x93\x5&\x14\x2\x92\x91\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x1D"+
		"\x3\x2\x2\x2\x94\x95\a\v\x2\x2\x95\x96\x5$\x13\x2\x96\x1F\x3\x2\x2\x2"+
		"\x97\x98\a\f\x2\x2\x98\x99\x5$\x13\x2\x99!\x3\x2\x2\x2\x9A\x9B\a\r\x2"+
		"\x2\x9B\x9C\x5$\x13\x2\x9C#\x3\x2\x2\x2\x9D\x9E\x5> \x2\x9E%\x3\x2\x2"+
		"\x2\x9F\xA0\a\xE\x2\x2\xA0\xA1\a\x1E\x2\x2\xA1\xA2\a\xF\x2\x2\xA2\xA7"+
		"\x5(\x15\x2\xA3\xA4\a\x4\x2\x2\xA4\xA6\x5(\x15\x2\xA5\xA3\x3\x2\x2\x2"+
		"\xA6\xA9\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xAA\x3"+
		"\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xAA\xAB\a\x10\x2\x2\xAB\'\x3\x2\x2\x2\xAC"+
		"\xAD\a\xF\x2\x2\xAD\xAE\x5\b\x5\x2\xAE\xAF\a\x10\x2\x2\xAF)\x3\x2\x2\x2"+
		"\xB0\xB1\x5> \x2\xB1\xB2\a\n\x2\x2\xB2\xB4\x3\x2\x2\x2\xB3\xB0\x3\x2\x2"+
		"\x2\xB4\xB7\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB8"+
		"\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB8\xBE\x5> \x2\xB9\xBB\a\x4\x2\x2\xBA"+
		"\xBC\a!\x2\x2\xBB\xBA\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBD\x3\x2\x2"+
		"\x2\xBD\xBF\x5,\x17\x2\xBE\xB9\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF+\x3"+
		"\x2\x2\x2\xC0\xC1\x5@!\x2\xC1\xC2\a\n\x2\x2\xC2\xC3\x5@!\x2\xC3\xC4\a"+
		"\n\x2\x2\xC4\xC5\x5@!\x2\xC5\xC6\a\n\x2\x2\xC6\xC7\x5@!\x2\xC7-\x3\x2"+
		"\x2\x2\xC8\xCB\a\x1D\x2\x2\xC9\xCB\x5\x30\x19\x2\xCA\xC8\x3\x2\x2\x2\xCA"+
		"\xC9\x3\x2\x2\x2\xCB/\x3\x2\x2\x2\xCC\xD0\x5\x34\x1B\x2\xCD\xD0\x5\x36"+
		"\x1C\x2\xCE\xD0\x5\x38\x1D\x2\xCF\xCC\x3\x2\x2\x2\xCF\xCD\x3\x2\x2\x2"+
		"\xCF\xCE\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD2\x5\x32\x1A\x2\xD2\x31"+
		"\x3\x2\x2\x2\xD3\xD5\a\x11\x2\x2\xD4\xD6\a!\x2\x2\xD5\xD4\x3\x2\x2\x2"+
		"\xD5\xD6\x3\x2\x2\x2\xD6\xE5\x3\x2\x2\x2\xD7\xE2\x5:\x1E\x2\xD8\xDA\a"+
		"!\x2\x2\xD9\xD8\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB"+
		"\xDD\a\x4\x2\x2\xDC\xDE\a!\x2\x2\xDD\xDC\x3\x2\x2\x2\xDD\xDE\x3\x2\x2"+
		"\x2\xDE\xDF\x3\x2\x2\x2\xDF\xE1\x5:\x1E\x2\xE0\xD9\x3\x2\x2\x2\xE1\xE4"+
		"\x3\x2\x2\x2\xE2\xE0\x3\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3\xE6\x3\x2\x2"+
		"\x2\xE4\xE2\x3\x2\x2\x2\xE5\xD7\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xE8"+
		"\x3\x2\x2\x2\xE7\xE9\a!\x2\x2\xE8\xE7\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2"+
		"\xE9\xEA\x3\x2\x2\x2\xEA\xEB\a\x12\x2\x2\xEB\x33\x3\x2\x2\x2\xEC\xEE\a"+
		"!\x2\x2\xED\xEC\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF"+
		"\xF0\a\xF\x2\x2\xF0\xF1\a\x1D\x2\x2\xF1\xF3\a\x10\x2\x2\xF2\xF4\a!\x2"+
		"\x2\xF3\xF2\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF6"+
		"\a\xF\x2\x2\xF6\xF7\x5\x6\x4\x2\xF7\xF8\a\x13\x2\x2\xF8\x35\x3\x2\x2\x2"+
		"\xF9\xFB\x5<\x1F\x2\xFA\xFC\a!\x2\x2\xFB\xFA\x3\x2\x2\x2\xFB\xFC\x3\x2"+
		"\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFE\a\xF\x2\x2\xFE\xFF\a\x1D\x2\x2\xFF"+
		"\x101\a\x10\x2\x2\x100\x102\a!\x2\x2\x101\x100\x3\x2\x2\x2\x101\x102\x3"+
		"\x2\x2\x2\x102\x103\x3\x2\x2\x2\x103\x104\a\xF\x2\x2\x104\x105\x5\x6\x4"+
		"\x2\x105\x106\a\x14\x2\x2\x106\x37\x3\x2\x2\x2\x107\x109\x5<\x1F\x2\x108"+
		"\x107\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109\x10B\x3\x2\x2\x2\x10A\x10C"+
		"\a!\x2\x2\x10B\x10A\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10D\x3\x2"+
		"\x2\x2\x10D\x10E\a\xF\x2\x2\x10E\x10F\x5\x6\x4\x2\x10F\x111\a\x10\x2\x2"+
		"\x110\x112\a!\x2\x2\x111\x110\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x113"+
		"\x3\x2\x2\x2\x113\x114\a\xF\x2\x2\x114\x115\x5\x6\x4\x2\x115\x116\a\x15"+
		"\x2\x2\x116\x118\x5> \x2\x117\x119\x5&\x14\x2\x118\x117\x3\x2\x2\x2\x118"+
		"\x119\x3\x2\x2\x2\x119\x39\x3\x2\x2\x2\x11A\x11C\a!\x2\x2\x11B\x11A\x3"+
		"\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x123\a\x16"+
		"\x2\x2\x11E\x123\a\x17\x2\x2\x11F\x123\a\x18\x2\x2\x120\x123\a\x19\x2"+
		"\x2\x121\x123\a\x1A\x2\x2\x122\x11B\x3\x2\x2\x2\x122\x11E\x3\x2\x2\x2"+
		"\x122\x11F\x3\x2\x2\x2\x122\x120\x3\x2\x2\x2\x122\x121\x3\x2\x2\x2\x122"+
		"\x123\x3\x2\x2\x2\x123\x125\x3\x2\x2\x2\x124\x126\a!\x2\x2\x125\x124\x3"+
		"\x2\x2\x2\x125\x126\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x128\a\xF\x2"+
		"\x2\x128\x129\x5\x6\x4\x2\x129\x12B\a\x10\x2\x2\x12A\x12C\a!\x2\x2\x12B"+
		"\x12A\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D\x12E"+
		"\x5> \x2\x12E;\x3\x2\x2\x2\x12F\x130\a\x1B\x2\x2\x130=\x3\x2\x2\x2\x131"+
		"\x137\a\x1F\x2\x2\x132\x136\a\x1F\x2\x2\x133\x136\x5@!\x2\x134\x136\a"+
		" \x2\x2\x135\x132\x3\x2\x2\x2\x135\x133\x3\x2\x2\x2\x135\x134\x3\x2\x2"+
		"\x2\x136\x139\x3\x2\x2\x2\x137\x135\x3\x2\x2\x2\x137\x138\x3\x2\x2\x2"+
		"\x138?\x3\x2\x2\x2\x139\x137\x3\x2\x2\x2\x13A\x13B\t\x2\x2\x2\x13B\x41"+
		"\x3\x2\x2\x2)MQUX_\x63gz}\x86\x8A\x8F\x92\xA7\xB5\xBB\xBE\xCA\xCF\xD5"+
		"\xD9\xDD\xE2\xE5\xE8\xED\xF3\xFB\x101\x108\x10B\x111\x118\x11B\x122\x125"+
		"\x12B\x135\x137";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace KaVE.Commons.Model.Names.CSharp.Parser
