//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jonas\Documents\Visual Studio 2013\Projects\Grammar\Grammar\Model\Names\CSharp\Parser\TypeNaming.g4 by ANTLR 4.5.3-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KaVE.Commons.Model.Names.CSharp.Parser {

/**
 * Copyright 2016 Sebastian Proksch
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class TypeNamingParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, UNKNOWN=29, POSNUM=30, LETTER=31, 
		SIGN=32, WS=33, EOL=34;
	public const int
		RULE_typeEOL = 0, RULE_methodEOL = 1, RULE_namespaceEOL = 2, RULE_assemblyEOL = 3, 
		RULE_parameterNameEOL = 4, RULE_memberNameEOL = 5, RULE_type = 6, RULE_typeParameter = 7, 
		RULE_notTypeParameter = 8, RULE_regularType = 9, RULE_delegateType = 10, 
		RULE_arrayType = 11, RULE_nestedType = 12, RULE_nestedTypeName = 13, RULE_resolvedType = 14, 
		RULE_namespace = 15, RULE_typeName = 16, RULE_possiblyGenericTypeName = 17, 
		RULE_enumTypeName = 18, RULE_interfaceTypeName = 19, RULE_structTypeName = 20, 
		RULE_simpleTypeName = 21, RULE_genericTypePart = 22, RULE_genericParam = 23, 
		RULE_assembly = 24, RULE_regularAssembly = 25, RULE_assemblyVersion = 26, 
		RULE_memberName = 27, RULE_simpleMemberName = 28, RULE_propertyName = 29, 
		RULE_propertyModifier = 30, RULE_method = 31, RULE_regularMethod = 32, 
		RULE_methodParameters = 33, RULE_nonStaticCtor = 34, RULE_staticCctor = 35, 
		RULE_customMethod = 36, RULE_signature = 37, RULE_formalParam = 38, RULE_parameterModifier = 39, 
		RULE_staticModifier = 40, RULE_paramsModifier = 41, RULE_optsModifier = 42, 
		RULE_refModifier = 43, RULE_outModifier = 44, RULE_extensionModifier = 45, 
		RULE_id = 46, RULE_num = 47;
	public static readonly string[] ruleNames = {
		"typeEOL", "methodEOL", "namespaceEOL", "assemblyEOL", "parameterNameEOL", 
		"memberNameEOL", "type", "typeParameter", "notTypeParameter", "regularType", 
		"delegateType", "arrayType", "nestedType", "nestedTypeName", "resolvedType", 
		"namespace", "typeName", "possiblyGenericTypeName", "enumTypeName", "interfaceTypeName", 
		"structTypeName", "simpleTypeName", "genericTypePart", "genericParam", 
		"assembly", "regularAssembly", "assemblyVersion", "memberName", "simpleMemberName", 
		"propertyName", "propertyModifier", "method", "regularMethod", "methodParameters", 
		"nonStaticCtor", "staticCctor", "customMethod", "signature", "formalParam", 
		"parameterModifier", "staticModifier", "paramsModifier", "optsModifier", 
		"refModifier", "outModifier", "extensionModifier", "id", "num"
	};

	private static readonly string[] _LiteralNames = {
		null, "'->'", "','", "'d:'", "'arr('", "'):'", "'n:'", "'+'", "'.'", "'e:'", 
		"'i:'", "'s:'", "'''", "'['", "']'", "'get'", "'set'", "'('", "')'", "']..ctor'", 
		"']..cctor'", "'].'", "'static'", "'params '", "'opt '", "'ref '", "'out '", 
		"'this '", "'0'", "'?'", null, null, null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "UNKNOWN", "POSNUM", "LETTER", "SIGN", "WS", 
		"EOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TypeNaming.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TypeNamingParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class TypeEOLContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(TypeNamingParser.EOL, 0); }
		public TypeEOLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeEOL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterTypeEOL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitTypeEOL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeEOL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeEOLContext typeEOL() {
		TypeEOLContext _localctx = new TypeEOLContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_typeEOL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; type();
			State = 97; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodEOLContext : ParserRuleContext {
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(TypeNamingParser.EOL, 0); }
		public MethodEOLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodEOL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterMethodEOL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitMethodEOL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodEOL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodEOLContext methodEOL() {
		MethodEOLContext _localctx = new MethodEOLContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_methodEOL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; method();
			State = 100; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceEOLContext : ParserRuleContext {
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(TypeNamingParser.EOL, 0); }
		public NamespaceEOLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceEOL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNamespaceEOL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNamespaceEOL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceEOL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceEOLContext namespaceEOL() {
		NamespaceEOLContext _localctx = new NamespaceEOLContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_namespaceEOL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; @namespace();
			State = 103; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyEOLContext : ParserRuleContext {
		public AssemblyContext assembly() {
			return GetRuleContext<AssemblyContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(TypeNamingParser.EOL, 0); }
		public AssemblyEOLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyEOL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterAssemblyEOL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitAssemblyEOL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyEOL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyEOLContext assemblyEOL() {
		AssemblyEOLContext _localctx = new AssemblyEOLContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_assemblyEOL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; assembly();
			State = 106; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterNameEOLContext : ParserRuleContext {
		public FormalParamContext formalParam() {
			return GetRuleContext<FormalParamContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(TypeNamingParser.EOL, 0); }
		public ParameterNameEOLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterNameEOL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterParameterNameEOL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitParameterNameEOL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterNameEOL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterNameEOLContext parameterNameEOL() {
		ParameterNameEOLContext _localctx = new ParameterNameEOLContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_parameterNameEOL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; formalParam();
			State = 109; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameEOLContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(TypeNamingParser.EOL, 0); }
		public MemberNameEOLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberNameEOL; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterMemberNameEOL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitMemberNameEOL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberNameEOL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameEOLContext memberNameEOL() {
		MemberNameEOLContext _localctx = new MemberNameEOLContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_memberNameEOL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; memberName();
			State = 112; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public RegularTypeContext regularType() {
			return GetRuleContext<RegularTypeContext>(0);
		}
		public DelegateTypeContext delegateType() {
			return GetRuleContext<DelegateTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_type);
		try {
			State = 119;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; Match(UNKNOWN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; typeParameter();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 116; regularType();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 117; delegateType();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 118; arrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NotTypeParameterContext notTypeParameter() {
			return GetRuleContext<NotTypeParameterContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; id();
			State = 130;
			_la = _input.La(1);
			if (_la==T__0 || _la==WS) {
				{
				State = 123;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 122; Match(WS);
					}
				}

				State = 125; Match(T__0);
				State = 127;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 126; Match(WS);
					}
				}

				State = 129; notTypeParameter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotTypeParameterContext : ParserRuleContext {
		public RegularTypeContext regularType() {
			return GetRuleContext<RegularTypeContext>(0);
		}
		public DelegateTypeContext delegateType() {
			return GetRuleContext<DelegateTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NotTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNotTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNotTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotTypeParameterContext notTypeParameter() {
		NotTypeParameterContext _localctx = new NotTypeParameterContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_notTypeParameter);
		try {
			State = 137;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132; regularType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133; delegateType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134; arrayType();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 135; Match(UNKNOWN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 136; id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegularTypeContext : ParserRuleContext {
		public AssemblyContext assembly() {
			return GetRuleContext<AssemblyContext>(0);
		}
		public ResolvedTypeContext resolvedType() {
			return GetRuleContext<ResolvedTypeContext>(0);
		}
		public NestedTypeContext nestedType() {
			return GetRuleContext<NestedTypeContext>(0);
		}
		public ITerminalNode WS() { return GetToken(TypeNamingParser.WS, 0); }
		public RegularTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regularType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterRegularType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitRegularType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegularType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegularTypeContext regularType() {
		RegularTypeContext _localctx = new RegularTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_regularType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			switch (_input.La(1)) {
			case T__8:
			case T__9:
			case T__10:
			case LETTER:
				{
				State = 139; resolvedType();
				}
				break;
			case T__5:
				{
				State = 140; nestedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 143; Match(T__1);
			State = 145;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 144; Match(WS);
				}
			}

			State = 147; assembly();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateTypeContext : ParserRuleContext {
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public DelegateTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterDelegateType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitDelegateType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateTypeContext delegateType() {
		DelegateTypeContext _localctx = new DelegateTypeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_delegateType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(T__2);
			State = 150; method();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public ITerminalNode POSNUM() { return GetToken(TypeNamingParser.POSNUM, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(T__3);
			State = 153; Match(POSNUM);
			State = 154; Match(T__4);
			State = 155; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedTypeContext : ParserRuleContext {
		public NestedTypeNameContext nestedTypeName() {
			return GetRuleContext<NestedTypeNameContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NestedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNestedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNestedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedTypeContext nestedType() {
		NestedTypeContext _localctx = new NestedTypeContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_nestedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(T__5);
			State = 158; nestedTypeName();
			State = 159; Match(T__6);
			State = 160; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedTypeNameContext : ParserRuleContext {
		public NestedTypeContext nestedType() {
			return GetRuleContext<NestedTypeContext>(0);
		}
		public ResolvedTypeContext resolvedType() {
			return GetRuleContext<ResolvedTypeContext>(0);
		}
		public NestedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNestedTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNestedTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedTypeNameContext nestedTypeName() {
		NestedTypeNameContext _localctx = new NestedTypeNameContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_nestedTypeName);
		try {
			State = 164;
			switch (_input.La(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162; nestedType();
				}
				break;
			case T__8:
			case T__9:
			case T__10:
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163; resolvedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResolvedTypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public ResolvedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resolvedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterResolvedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitResolvedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResolvedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResolvedTypeContext resolvedType() {
		ResolvedTypeContext _localctx = new ResolvedTypeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_resolvedType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 166; @namespace();
				}
				break;
			}
			State = 169; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_namespace);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 171; id();
					State = 172; Match(T__7);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 176;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public EnumTypeNameContext enumTypeName() {
			return GetRuleContext<EnumTypeNameContext>(0);
		}
		public PossiblyGenericTypeNameContext possiblyGenericTypeName() {
			return GetRuleContext<PossiblyGenericTypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_typeName);
		try {
			State = 180;
			switch (_input.La(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178; enumTypeName();
				}
				break;
			case T__9:
			case T__10:
			case LETTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179; possiblyGenericTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PossiblyGenericTypeNameContext : ParserRuleContext {
		public InterfaceTypeNameContext interfaceTypeName() {
			return GetRuleContext<InterfaceTypeNameContext>(0);
		}
		public StructTypeNameContext structTypeName() {
			return GetRuleContext<StructTypeNameContext>(0);
		}
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public GenericTypePartContext genericTypePart() {
			return GetRuleContext<GenericTypePartContext>(0);
		}
		public PossiblyGenericTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_possiblyGenericTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterPossiblyGenericTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitPossiblyGenericTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPossiblyGenericTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PossiblyGenericTypeNameContext possiblyGenericTypeName() {
		PossiblyGenericTypeNameContext _localctx = new PossiblyGenericTypeNameContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_possiblyGenericTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			switch (_input.La(1)) {
			case T__9:
				{
				State = 182; interfaceTypeName();
				}
				break;
			case T__10:
				{
				State = 183; structTypeName();
				}
				break;
			case LETTER:
				{
				State = 184; simpleTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 188;
			_la = _input.La(1);
			if (_la==T__11) {
				{
				State = 187; genericTypePart();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeNameContext : ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public EnumTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterEnumTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitEnumTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeNameContext enumTypeName() {
		EnumTypeNameContext _localctx = new EnumTypeNameContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_enumTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(T__8);
			State = 191; simpleTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeNameContext : ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public InterfaceTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterInterfaceTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitInterfaceTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeNameContext interfaceTypeName() {
		InterfaceTypeNameContext _localctx = new InterfaceTypeNameContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_interfaceTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(T__9);
			State = 194; simpleTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeNameContext : ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public StructTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterStructTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitStructTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeNameContext structTypeName() {
		StructTypeNameContext _localctx = new StructTypeNameContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_structTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(T__10);
			State = 197; simpleTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterSimpleTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitSimpleTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypePartContext : ParserRuleContext {
		public ITerminalNode POSNUM() { return GetToken(TypeNamingParser.POSNUM, 0); }
		public GenericParamContext[] genericParam() {
			return GetRuleContexts<GenericParamContext>();
		}
		public GenericParamContext genericParam(int i) {
			return GetRuleContext<GenericParamContext>(i);
		}
		public GenericTypePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypePart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterGenericTypePart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitGenericTypePart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypePart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypePartContext genericTypePart() {
		GenericTypePartContext _localctx = new GenericTypePartContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_genericTypePart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(T__11);
			State = 202; Match(POSNUM);
			State = 203; Match(T__12);
			State = 204; genericParam();
			State = 209;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__1) {
				{
				{
				State = 205; Match(T__1);
				State = 206; genericParam();
				}
				}
				State = 211;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 212; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParamContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public GenericParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterGenericParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitGenericParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericParamContext genericParam() {
		GenericParamContext _localctx = new GenericParamContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_genericParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(T__12);
			State = 215; typeParameter();
			State = 216; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyContext : ParserRuleContext {
		public RegularAssemblyContext regularAssembly() {
			return GetRuleContext<RegularAssemblyContext>(0);
		}
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public AssemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterAssembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitAssembly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyContext assembly() {
		AssemblyContext _localctx = new AssemblyContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_assembly);
		try {
			State = 220;
			switch (_input.La(1)) {
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218; regularAssembly();
				}
				break;
			case UNKNOWN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219; Match(UNKNOWN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegularAssemblyContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public AssemblyVersionContext assemblyVersion() {
			return GetRuleContext<AssemblyVersionContext>(0);
		}
		public ITerminalNode WS() { return GetToken(TypeNamingParser.WS, 0); }
		public RegularAssemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regularAssembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterRegularAssembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitRegularAssembly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegularAssembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegularAssemblyContext regularAssembly() {
		RegularAssemblyContext _localctx = new RegularAssemblyContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_regularAssembly);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 222; id();
					State = 223; Match(T__7);
					}
					} 
				}
				State = 229;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			State = 230; id();
			State = 236;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 231; Match(T__1);
				State = 233;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 232; Match(WS);
					}
				}

				State = 235; assemblyVersion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyVersionContext : ParserRuleContext {
		public NumContext[] num() {
			return GetRuleContexts<NumContext>();
		}
		public NumContext num(int i) {
			return GetRuleContext<NumContext>(i);
		}
		public AssemblyVersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyVersion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterAssemblyVersion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitAssemblyVersion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyVersionContext assemblyVersion() {
		AssemblyVersionContext _localctx = new AssemblyVersionContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_assemblyVersion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; num();
			State = 239; Match(T__7);
			State = 240; num();
			State = 241; Match(T__7);
			State = 242; num();
			State = 243; Match(T__7);
			State = 244; num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameContext : ParserRuleContext {
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public SimpleMemberNameContext simpleMemberName() {
			return GetRuleContext<SimpleMemberNameContext>(0);
		}
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public MemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitMemberName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameContext memberName() {
		MemberNameContext _localctx = new MemberNameContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_memberName);
		try {
			State = 249;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246; Match(UNKNOWN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247; simpleMemberName();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 248; propertyName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleMemberNameContext : ParserRuleContext {
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public StaticModifierContext staticModifier() {
			return GetRuleContext<StaticModifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(TypeNamingParser.WS, 0); }
		public SimpleMemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleMemberName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterSimpleMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitSimpleMemberName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleMemberName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleMemberNameContext simpleMemberName() {
		SimpleMemberNameContext _localctx = new SimpleMemberNameContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_simpleMemberName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			_la = _input.La(1);
			if (_la==T__21) {
				{
				State = 251; staticModifier();
				}
			}

			State = 255;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 254; Match(WS);
				}
			}

			State = 257; signature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public StaticModifierContext staticModifier() {
			return GetRuleContext<StaticModifierContext>(0);
		}
		public PropertyModifierContext propertyModifier() {
			return GetRuleContext<PropertyModifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(TypeNamingParser.WS, 0); }
		public MethodParametersContext methodParameters() {
			return GetRuleContext<MethodParametersContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterPropertyName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitPropertyName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_propertyName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			switch (_input.La(1)) {
			case T__21:
				{
				State = 259; staticModifier();
				}
				break;
			case T__14:
			case T__15:
				{
				State = 260; propertyModifier();
				}
				break;
			case T__12:
			case WS:
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 264;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 263; Match(WS);
				}
			}

			State = 266; signature();
			State = 268;
			_la = _input.La(1);
			if (_la==T__16) {
				{
				State = 267; methodParameters();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyModifierContext : ParserRuleContext {
		public PropertyModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterPropertyModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitPropertyModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyModifierContext propertyModifier() {
		PropertyModifierContext _localctx = new PropertyModifierContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_propertyModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			_la = _input.La(1);
			if ( !(_la==T__14 || _la==T__15) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public RegularMethodContext regularMethod() {
			return GetRuleContext<RegularMethodContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_method);
		try {
			State = 274;
			switch (_input.La(1)) {
			case UNKNOWN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; Match(UNKNOWN);
				}
				break;
			case T__12:
			case T__21:
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273; regularMethod();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegularMethodContext : ParserRuleContext {
		public MethodParametersContext methodParameters() {
			return GetRuleContext<MethodParametersContext>(0);
		}
		public NonStaticCtorContext nonStaticCtor() {
			return GetRuleContext<NonStaticCtorContext>(0);
		}
		public StaticCctorContext staticCctor() {
			return GetRuleContext<StaticCctorContext>(0);
		}
		public CustomMethodContext customMethod() {
			return GetRuleContext<CustomMethodContext>(0);
		}
		public RegularMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regularMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterRegularMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitRegularMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegularMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegularMethodContext regularMethod() {
		RegularMethodContext _localctx = new RegularMethodContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_regularMethod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 276; nonStaticCtor();
				}
				break;

			case 2:
				{
				State = 277; staticCctor();
				}
				break;

			case 3:
				{
				State = 278; customMethod();
				}
				break;
			}
			State = 281; methodParameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParametersContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public FormalParamContext[] formalParam() {
			return GetRuleContexts<FormalParamContext>();
		}
		public FormalParamContext formalParam(int i) {
			return GetRuleContext<FormalParamContext>(i);
		}
		public MethodParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterMethodParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitMethodParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParametersContext methodParameters() {
		MethodParametersContext _localctx = new MethodParametersContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_methodParameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(T__16);
			State = 285;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 284; Match(WS);
				}
				break;
			}
			State = 301;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 287; formalParam();
				State = 298;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 289;
						_la = _input.La(1);
						if (_la==WS) {
							{
							State = 288; Match(WS);
							}
						}

						State = 291; Match(T__1);
						State = 293;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
						case 1:
							{
							State = 292; Match(WS);
							}
							break;
						}
						State = 295; formalParam();
						}
						} 
					}
					State = 300;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
				}
				}
				break;
			}
			State = 304;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 303; Match(WS);
				}
			}

			State = 306; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonStaticCtorContext : ParserRuleContext {
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public NonStaticCtorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonStaticCtor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNonStaticCtor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNonStaticCtor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonStaticCtor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonStaticCtorContext nonStaticCtor() {
		NonStaticCtorContext _localctx = new NonStaticCtorContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_nonStaticCtor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 308; Match(WS);
				}
			}

			State = 311; Match(T__12);
			State = 312; Match(UNKNOWN);
			State = 313; Match(T__13);
			State = 315;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 314; Match(WS);
				}
			}

			State = 317; Match(T__12);
			State = 318; type();
			State = 319; Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticCctorContext : ParserRuleContext {
		public StaticModifierContext staticModifier() {
			return GetRuleContext<StaticModifierContext>(0);
		}
		public ITerminalNode UNKNOWN() { return GetToken(TypeNamingParser.UNKNOWN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public StaticCctorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticCctor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterStaticCctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitStaticCctor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticCctor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticCctorContext staticCctor() {
		StaticCctorContext _localctx = new StaticCctorContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_staticCctor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; staticModifier();
			State = 323;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 322; Match(WS);
				}
			}

			State = 325; Match(T__12);
			State = 326; Match(UNKNOWN);
			State = 327; Match(T__13);
			State = 329;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 328; Match(WS);
				}
			}

			State = 331; Match(T__12);
			State = 332; type();
			State = 333; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomMethodContext : ParserRuleContext {
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public StaticModifierContext staticModifier() {
			return GetRuleContext<StaticModifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(TypeNamingParser.WS, 0); }
		public GenericTypePartContext genericTypePart() {
			return GetRuleContext<GenericTypePartContext>(0);
		}
		public CustomMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterCustomMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitCustomMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomMethodContext customMethod() {
		CustomMethodContext _localctx = new CustomMethodContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_customMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			_la = _input.La(1);
			if (_la==T__21) {
				{
				State = 335; staticModifier();
				}
			}

			State = 339;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 338; Match(WS);
				}
			}

			State = 341; signature();
			State = 343;
			_la = _input.La(1);
			if (_la==T__11) {
				{
				State = 342; genericTypePart();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode WS() { return GetToken(TypeNamingParser.WS, 0); }
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; Match(T__12);
			State = 346; type();
			State = 347; Match(T__13);
			State = 349;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 348; Match(WS);
				}
			}

			State = 351; Match(T__12);
			State = 352; type();
			State = 353; Match(T__20);
			State = 354; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ParameterModifierContext parameterModifier() {
			return GetRuleContext<ParameterModifierContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(TypeNamingParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TypeNamingParser.WS, i);
		}
		public FormalParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterFormalParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitFormalParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamContext formalParam() {
		FormalParamContext _localctx = new FormalParamContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_formalParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 357;
				_la = _input.La(1);
				if (_la==WS) {
					{
					State = 356; Match(WS);
					}
				}

				State = 359; parameterModifier();
				}
				break;
			}
			State = 363;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 362; Match(WS);
				}
			}

			State = 365; Match(T__12);
			State = 366; type();
			State = 367; Match(T__13);
			State = 369;
			_la = _input.La(1);
			if (_la==WS) {
				{
				State = 368; Match(WS);
				}
			}

			State = 371; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ParamsModifierContext paramsModifier() {
			return GetRuleContext<ParamsModifierContext>(0);
		}
		public OptsModifierContext optsModifier() {
			return GetRuleContext<OptsModifierContext>(0);
		}
		public RefModifierContext refModifier() {
			return GetRuleContext<RefModifierContext>(0);
		}
		public OutModifierContext outModifier() {
			return GetRuleContext<OutModifierContext>(0);
		}
		public ExtensionModifierContext extensionModifier() {
			return GetRuleContext<ExtensionModifierContext>(0);
		}
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_parameterModifier);
		try {
			State = 378;
			switch (_input.La(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373; paramsModifier();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 374; optsModifier();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 375; refModifier();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 376; outModifier();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 5);
				{
				State = 377; extensionModifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticModifierContext : ParserRuleContext {
		public StaticModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterStaticModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitStaticModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticModifierContext staticModifier() {
		StaticModifierContext _localctx = new StaticModifierContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_staticModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsModifierContext : ParserRuleContext {
		public ParamsModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramsModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterParamsModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitParamsModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamsModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsModifierContext paramsModifier() {
		ParamsModifierContext _localctx = new ParamsModifierContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_paramsModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptsModifierContext : ParserRuleContext {
		public OptsModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optsModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterOptsModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitOptsModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptsModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptsModifierContext optsModifier() {
		OptsModifierContext _localctx = new OptsModifierContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_optsModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefModifierContext : ParserRuleContext {
		public RefModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterRefModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitRefModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefModifierContext refModifier() {
		RefModifierContext _localctx = new RefModifierContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_refModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutModifierContext : ParserRuleContext {
		public OutModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterOutModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitOutModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutModifierContext outModifier() {
		OutModifierContext _localctx = new OutModifierContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_outModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionModifierContext : ParserRuleContext {
		public ExtensionModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterExtensionModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitExtensionModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensionModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionModifierContext extensionModifier() {
		ExtensionModifierContext _localctx = new ExtensionModifierContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_extensionModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode[] LETTER() { return GetTokens(TypeNamingParser.LETTER); }
		public ITerminalNode LETTER(int i) {
			return GetToken(TypeNamingParser.LETTER, i);
		}
		public NumContext[] num() {
			return GetRuleContexts<NumContext>();
		}
		public NumContext num(int i) {
			return GetRuleContext<NumContext>(i);
		}
		public ITerminalNode[] SIGN() { return GetTokens(TypeNamingParser.SIGN); }
		public ITerminalNode SIGN(int i) {
			return GetToken(TypeNamingParser.SIGN, i);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; Match(LETTER);
			State = 398;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__27) | (1L << POSNUM) | (1L << LETTER) | (1L << SIGN))) != 0)) {
				{
				State = 396;
				switch (_input.La(1)) {
				case LETTER:
					{
					State = 393; Match(LETTER);
					}
					break;
				case T__27:
				case POSNUM:
					{
					State = 394; num();
					}
					break;
				case SIGN:
					{
					State = 395; Match(SIGN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 400;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public ITerminalNode POSNUM() { return GetToken(TypeNamingParser.POSNUM, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITypeNamingListener typedListener = listener as ITypeNamingListener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeNamingVisitor<TResult> typedVisitor = visitor as ITypeNamingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_num);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			_la = _input.La(1);
			if ( !(_la==T__27 || _la==POSNUM) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3$\x196\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x3\x2\x3"+
		"\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x6"+
		"\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x5\bz\n\b\x3\t\x3"+
		"\t\x5\t~\n\t\x3\t\x3\t\x5\t\x82\n\t\x3\t\x5\t\x85\n\t\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x5\n\x8C\n\n\x3\v\x3\v\x5\v\x90\n\v\x3\v\x3\v\x5\v\x94\n\v\x3"+
		"\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x5\xF\xA7\n\xF\x3\x10\x5\x10\xAA\n\x10\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x11\x6\x11\xB1\n\x11\r\x11\xE\x11\xB2\x3\x12\x3\x12"+
		"\x5\x12\xB7\n\x12\x3\x13\x3\x13\x3\x13\x5\x13\xBC\n\x13\x3\x13\x5\x13"+
		"\xBF\n\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3"+
		"\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\xD2"+
		"\n\x18\f\x18\xE\x18\xD5\v\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x1A\x3\x1A\x5\x1A\xDF\n\x1A\x3\x1B\x3\x1B\x3\x1B\a\x1B\xE4\n\x1B\f"+
		"\x1B\xE\x1B\xE7\v\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\xEC\n\x1B\x3\x1B\x5"+
		"\x1B\xEF\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1D\x3\x1D\x3\x1D\x5\x1D\xFC\n\x1D\x3\x1E\x5\x1E\xFF\n\x1E\x3\x1E"+
		"\x5\x1E\x102\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x5\x1F\x108\n\x1F\x3\x1F"+
		"\x5\x1F\x10B\n\x1F\x3\x1F\x3\x1F\x5\x1F\x10F\n\x1F\x3 \x3 \x3!\x3!\x5"+
		"!\x115\n!\x3\"\x3\"\x3\"\x5\"\x11A\n\"\x3\"\x3\"\x3#\x3#\x5#\x120\n#\x3"+
		"#\x3#\x5#\x124\n#\x3#\x3#\x5#\x128\n#\x3#\a#\x12B\n#\f#\xE#\x12E\v#\x5"+
		"#\x130\n#\x3#\x5#\x133\n#\x3#\x3#\x3$\x5$\x138\n$\x3$\x3$\x3$\x3$\x5$"+
		"\x13E\n$\x3$\x3$\x3$\x3$\x3%\x3%\x5%\x146\n%\x3%\x3%\x3%\x3%\x5%\x14C"+
		"\n%\x3%\x3%\x3%\x3%\x3&\x5&\x153\n&\x3&\x5&\x156\n&\x3&\x3&\x5&\x15A\n"+
		"&\x3\'\x3\'\x3\'\x3\'\x5\'\x160\n\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x5(\x168"+
		"\n(\x3(\x5(\x16B\n(\x3(\x5(\x16E\n(\x3(\x3(\x3(\x3(\x5(\x174\n(\x3(\x3"+
		"(\x3)\x3)\x3)\x3)\x3)\x5)\x17D\n)\x3*\x3*\x3+\x3+\x3,\x3,\x3-\x3-\x3."+
		"\x3.\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\a\x30\x18F\n\x30\f\x30\xE\x30"+
		"\x192\v\x30\x3\x31\x3\x31\x3\x31\x2\x2\x2\x32\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:"+
		"\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X"+
		"\x2Z\x2\\\x2^\x2`\x2\x2\x4\x3\x2\x11\x12\x4\x2\x1E\x1E  \x1A2\x2\x62\x3"+
		"\x2\x2\x2\x4\x65\x3\x2\x2\x2\x6h\x3\x2\x2\x2\bk\x3\x2\x2\x2\nn\x3\x2\x2"+
		"\x2\fq\x3\x2\x2\x2\xEy\x3\x2\x2\x2\x10{\x3\x2\x2\x2\x12\x8B\x3\x2\x2\x2"+
		"\x14\x8F\x3\x2\x2\x2\x16\x97\x3\x2\x2\x2\x18\x9A\x3\x2\x2\x2\x1A\x9F\x3"+
		"\x2\x2\x2\x1C\xA6\x3\x2\x2\x2\x1E\xA9\x3\x2\x2\x2 \xB0\x3\x2\x2\x2\"\xB6"+
		"\x3\x2\x2\x2$\xBB\x3\x2\x2\x2&\xC0\x3\x2\x2\x2(\xC3\x3\x2\x2\x2*\xC6\x3"+
		"\x2\x2\x2,\xC9\x3\x2\x2\x2.\xCB\x3\x2\x2\x2\x30\xD8\x3\x2\x2\x2\x32\xDE"+
		"\x3\x2\x2\x2\x34\xE5\x3\x2\x2\x2\x36\xF0\x3\x2\x2\x2\x38\xFB\x3\x2\x2"+
		"\x2:\xFE\x3\x2\x2\x2<\x107\x3\x2\x2\x2>\x110\x3\x2\x2\x2@\x114\x3\x2\x2"+
		"\x2\x42\x119\x3\x2\x2\x2\x44\x11D\x3\x2\x2\x2\x46\x137\x3\x2\x2\x2H\x143"+
		"\x3\x2\x2\x2J\x152\x3\x2\x2\x2L\x15B\x3\x2\x2\x2N\x16A\x3\x2\x2\x2P\x17C"+
		"\x3\x2\x2\x2R\x17E\x3\x2\x2\x2T\x180\x3\x2\x2\x2V\x182\x3\x2\x2\x2X\x184"+
		"\x3\x2\x2\x2Z\x186\x3\x2\x2\x2\\\x188\x3\x2\x2\x2^\x18A\x3\x2\x2\x2`\x193"+
		"\x3\x2\x2\x2\x62\x63\x5\xE\b\x2\x63\x64\a$\x2\x2\x64\x3\x3\x2\x2\x2\x65"+
		"\x66\x5@!\x2\x66g\a$\x2\x2g\x5\x3\x2\x2\x2hi\x5 \x11\x2ij\a$\x2\x2j\a"+
		"\x3\x2\x2\x2kl\x5\x32\x1A\x2lm\a$\x2\x2m\t\x3\x2\x2\x2no\x5N(\x2op\a$"+
		"\x2\x2p\v\x3\x2\x2\x2qr\x5\x38\x1D\x2rs\a$\x2\x2s\r\x3\x2\x2\x2tz\a\x1F"+
		"\x2\x2uz\x5\x10\t\x2vz\x5\x14\v\x2wz\x5\x16\f\x2xz\x5\x18\r\x2yt\x3\x2"+
		"\x2\x2yu\x3\x2\x2\x2yv\x3\x2\x2\x2yw\x3\x2\x2\x2yx\x3\x2\x2\x2z\xF\x3"+
		"\x2\x2\x2{\x84\x5^\x30\x2|~\a#\x2\x2}|\x3\x2\x2\x2}~\x3\x2\x2\x2~\x7F"+
		"\x3\x2\x2\x2\x7F\x81\a\x3\x2\x2\x80\x82\a#\x2\x2\x81\x80\x3\x2\x2\x2\x81"+
		"\x82\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\x5\x12\n\x2\x84}\x3\x2\x2"+
		"\x2\x84\x85\x3\x2\x2\x2\x85\x11\x3\x2\x2\x2\x86\x8C\x5\x14\v\x2\x87\x8C"+
		"\x5\x16\f\x2\x88\x8C\x5\x18\r\x2\x89\x8C\a\x1F\x2\x2\x8A\x8C\x5^\x30\x2"+
		"\x8B\x86\x3\x2\x2\x2\x8B\x87\x3\x2\x2\x2\x8B\x88\x3\x2\x2\x2\x8B\x89\x3"+
		"\x2\x2\x2\x8B\x8A\x3\x2\x2\x2\x8C\x13\x3\x2\x2\x2\x8D\x90\x5\x1E\x10\x2"+
		"\x8E\x90\x5\x1A\xE\x2\x8F\x8D\x3\x2\x2\x2\x8F\x8E\x3\x2\x2\x2\x90\x91"+
		"\x3\x2\x2\x2\x91\x93\a\x4\x2\x2\x92\x94\a#\x2\x2\x93\x92\x3\x2\x2\x2\x93"+
		"\x94\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x96\x5\x32\x1A\x2\x96\x15\x3"+
		"\x2\x2\x2\x97\x98\a\x5\x2\x2\x98\x99\x5@!\x2\x99\x17\x3\x2\x2\x2\x9A\x9B"+
		"\a\x6\x2\x2\x9B\x9C\a \x2\x2\x9C\x9D\a\a\x2\x2\x9D\x9E\x5\xE\b\x2\x9E"+
		"\x19\x3\x2\x2\x2\x9F\xA0\a\b\x2\x2\xA0\xA1\x5\x1C\xF\x2\xA1\xA2\a\t\x2"+
		"\x2\xA2\xA3\x5\"\x12\x2\xA3\x1B\x3\x2\x2\x2\xA4\xA7\x5\x1A\xE\x2\xA5\xA7"+
		"\x5\x1E\x10\x2\xA6\xA4\x3\x2\x2\x2\xA6\xA5\x3\x2\x2\x2\xA7\x1D\x3\x2\x2"+
		"\x2\xA8\xAA\x5 \x11\x2\xA9\xA8\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xAB"+
		"\x3\x2\x2\x2\xAB\xAC\x5\"\x12\x2\xAC\x1F\x3\x2\x2\x2\xAD\xAE\x5^\x30\x2"+
		"\xAE\xAF\a\n\x2\x2\xAF\xB1\x3\x2\x2\x2\xB0\xAD\x3\x2\x2\x2\xB1\xB2\x3"+
		"\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3!\x3\x2\x2\x2\xB4"+
		"\xB7\x5&\x14\x2\xB5\xB7\x5$\x13\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB5\x3\x2\x2"+
		"\x2\xB7#\x3\x2\x2\x2\xB8\xBC\x5(\x15\x2\xB9\xBC\x5*\x16\x2\xBA\xBC\x5"+
		",\x17\x2\xBB\xB8\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBB\xBA\x3\x2\x2\x2\xBC"+
		"\xBE\x3\x2\x2\x2\xBD\xBF\x5.\x18\x2\xBE\xBD\x3\x2\x2\x2\xBE\xBF\x3\x2"+
		"\x2\x2\xBF%\x3\x2\x2\x2\xC0\xC1\a\v\x2\x2\xC1\xC2\x5,\x17\x2\xC2\'\x3"+
		"\x2\x2\x2\xC3\xC4\a\f\x2\x2\xC4\xC5\x5,\x17\x2\xC5)\x3\x2\x2\x2\xC6\xC7"+
		"\a\r\x2\x2\xC7\xC8\x5,\x17\x2\xC8+\x3\x2\x2\x2\xC9\xCA\x5^\x30\x2\xCA"+
		"-\x3\x2\x2\x2\xCB\xCC\a\xE\x2\x2\xCC\xCD\a \x2\x2\xCD\xCE\a\xF\x2\x2\xCE"+
		"\xD3\x5\x30\x19\x2\xCF\xD0\a\x4\x2\x2\xD0\xD2\x5\x30\x19\x2\xD1\xCF\x3"+
		"\x2\x2\x2\xD2\xD5\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2"+
		"\xD4\xD6\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6\xD7\a\x10\x2\x2\xD7/\x3\x2"+
		"\x2\x2\xD8\xD9\a\xF\x2\x2\xD9\xDA\x5\x10\t\x2\xDA\xDB\a\x10\x2\x2\xDB"+
		"\x31\x3\x2\x2\x2\xDC\xDF\x5\x34\x1B\x2\xDD\xDF\a\x1F\x2\x2\xDE\xDC\x3"+
		"\x2\x2\x2\xDE\xDD\x3\x2\x2\x2\xDF\x33\x3\x2\x2\x2\xE0\xE1\x5^\x30\x2\xE1"+
		"\xE2\a\n\x2\x2\xE2\xE4\x3\x2\x2\x2\xE3\xE0\x3\x2\x2\x2\xE4\xE7\x3\x2\x2"+
		"\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xE8\x3\x2\x2\x2\xE7\xE5"+
		"\x3\x2\x2\x2\xE8\xEE\x5^\x30\x2\xE9\xEB\a\x4\x2\x2\xEA\xEC\a#\x2\x2\xEB"+
		"\xEA\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\xEF\x5\x36"+
		"\x1C\x2\xEE\xE9\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\x35\x3\x2\x2\x2\xF0"+
		"\xF1\x5`\x31\x2\xF1\xF2\a\n\x2\x2\xF2\xF3\x5`\x31\x2\xF3\xF4\a\n\x2\x2"+
		"\xF4\xF5\x5`\x31\x2\xF5\xF6\a\n\x2\x2\xF6\xF7\x5`\x31\x2\xF7\x37\x3\x2"+
		"\x2\x2\xF8\xFC\a\x1F\x2\x2\xF9\xFC\x5:\x1E\x2\xFA\xFC\x5<\x1F\x2\xFB\xF8"+
		"\x3\x2\x2\x2\xFB\xF9\x3\x2\x2\x2\xFB\xFA\x3\x2\x2\x2\xFC\x39\x3\x2\x2"+
		"\x2\xFD\xFF\x5R*\x2\xFE\xFD\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x101\x3"+
		"\x2\x2\x2\x100\x102\a#\x2\x2\x101\x100\x3\x2\x2\x2\x101\x102\x3\x2\x2"+
		"\x2\x102\x103\x3\x2\x2\x2\x103\x104\x5L\'\x2\x104;\x3\x2\x2\x2\x105\x108"+
		"\x5R*\x2\x106\x108\x5> \x2\x107\x105\x3\x2\x2\x2\x107\x106\x3\x2\x2\x2"+
		"\x107\x108\x3\x2\x2\x2\x108\x10A\x3\x2\x2\x2\x109\x10B\a#\x2\x2\x10A\x109"+
		"\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10E\x5"+
		"L\'\x2\x10D\x10F\x5\x44#\x2\x10E\x10D\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2"+
		"\x10F=\x3\x2\x2\x2\x110\x111\t\x2\x2\x2\x111?\x3\x2\x2\x2\x112\x115\a"+
		"\x1F\x2\x2\x113\x115\x5\x42\"\x2\x114\x112\x3\x2\x2\x2\x114\x113\x3\x2"+
		"\x2\x2\x115\x41\x3\x2\x2\x2\x116\x11A\x5\x46$\x2\x117\x11A\x5H%\x2\x118"+
		"\x11A\x5J&\x2\x119\x116\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2\x119\x118\x3"+
		"\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11B\x11C\x5\x44#\x2\x11C\x43\x3\x2\x2"+
		"\x2\x11D\x11F\a\x13\x2\x2\x11E\x120\a#\x2\x2\x11F\x11E\x3\x2\x2\x2\x11F"+
		"\x120\x3\x2\x2\x2\x120\x12F\x3\x2\x2\x2\x121\x12C\x5N(\x2\x122\x124\a"+
		"#\x2\x2\x123\x122\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x124\x125\x3\x2\x2"+
		"\x2\x125\x127\a\x4\x2\x2\x126\x128\a#\x2\x2\x127\x126\x3\x2\x2\x2\x127"+
		"\x128\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129\x12B\x5N(\x2\x12A\x123\x3"+
		"\x2\x2\x2\x12B\x12E\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\x12C\x12D\x3\x2"+
		"\x2\x2\x12D\x130\x3\x2\x2\x2\x12E\x12C\x3\x2\x2\x2\x12F\x121\x3\x2\x2"+
		"\x2\x12F\x130\x3\x2\x2\x2\x130\x132\x3\x2\x2\x2\x131\x133\a#\x2\x2\x132"+
		"\x131\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x134\x3\x2\x2\x2\x134\x135"+
		"\a\x14\x2\x2\x135\x45\x3\x2\x2\x2\x136\x138\a#\x2\x2\x137\x136\x3\x2\x2"+
		"\x2\x137\x138\x3\x2\x2\x2\x138\x139\x3\x2\x2\x2\x139\x13A\a\xF\x2\x2\x13A"+
		"\x13B\a\x1F\x2\x2\x13B\x13D\a\x10\x2\x2\x13C\x13E\a#\x2\x2\x13D\x13C\x3"+
		"\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F\x140\a\xF\x2"+
		"\x2\x140\x141\x5\xE\b\x2\x141\x142\a\x15\x2\x2\x142G\x3\x2\x2\x2\x143"+
		"\x145\x5R*\x2\x144\x146\a#\x2\x2\x145\x144\x3\x2\x2\x2\x145\x146\x3\x2"+
		"\x2\x2\x146\x147\x3\x2\x2\x2\x147\x148\a\xF\x2\x2\x148\x149\a\x1F\x2\x2"+
		"\x149\x14B\a\x10\x2\x2\x14A\x14C\a#\x2\x2\x14B\x14A\x3\x2\x2\x2\x14B\x14C"+
		"\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x14E\a\xF\x2\x2\x14E\x14F\x5\xE"+
		"\b\x2\x14F\x150\a\x16\x2\x2\x150I\x3\x2\x2\x2\x151\x153\x5R*\x2\x152\x151"+
		"\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x155\x3\x2\x2\x2\x154\x156\a#"+
		"\x2\x2\x155\x154\x3\x2\x2\x2\x155\x156\x3\x2\x2\x2\x156\x157\x3\x2\x2"+
		"\x2\x157\x159\x5L\'\x2\x158\x15A\x5.\x18\x2\x159\x158\x3\x2\x2\x2\x159"+
		"\x15A\x3\x2\x2\x2\x15AK\x3\x2\x2\x2\x15B\x15C\a\xF\x2\x2\x15C\x15D\x5"+
		"\xE\b\x2\x15D\x15F\a\x10\x2\x2\x15E\x160\a#\x2\x2\x15F\x15E\x3\x2\x2\x2"+
		"\x15F\x160\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2\x161\x162\a\xF\x2\x2\x162"+
		"\x163\x5\xE\b\x2\x163\x164\a\x17\x2\x2\x164\x165\x5^\x30\x2\x165M\x3\x2"+
		"\x2\x2\x166\x168\a#\x2\x2\x167\x166\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2"+
		"\x168\x169\x3\x2\x2\x2\x169\x16B\x5P)\x2\x16A\x167\x3\x2\x2\x2\x16A\x16B"+
		"\x3\x2\x2\x2\x16B\x16D\x3\x2\x2\x2\x16C\x16E\a#\x2\x2\x16D\x16C\x3\x2"+
		"\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16F\x170\a\xF\x2\x2"+
		"\x170\x171\x5\xE\b\x2\x171\x173\a\x10\x2\x2\x172\x174\a#\x2\x2\x173\x172"+
		"\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x176\x5"+
		"^\x30\x2\x176O\x3\x2\x2\x2\x177\x17D\x5T+\x2\x178\x17D\x5V,\x2\x179\x17D"+
		"\x5X-\x2\x17A\x17D\x5Z.\x2\x17B\x17D\x5\\/\x2\x17C\x177\x3\x2\x2\x2\x17C"+
		"\x178\x3\x2\x2\x2\x17C\x179\x3\x2\x2\x2\x17C\x17A\x3\x2\x2\x2\x17C\x17B"+
		"\x3\x2\x2\x2\x17DQ\x3\x2\x2\x2\x17E\x17F\a\x18\x2\x2\x17FS\x3\x2\x2\x2"+
		"\x180\x181\a\x19\x2\x2\x181U\x3\x2\x2\x2\x182\x183\a\x1A\x2\x2\x183W\x3"+
		"\x2\x2\x2\x184\x185\a\x1B\x2\x2\x185Y\x3\x2\x2\x2\x186\x187\a\x1C\x2\x2"+
		"\x187[\x3\x2\x2\x2\x188\x189\a\x1D\x2\x2\x189]\x3\x2\x2\x2\x18A\x190\a"+
		"!\x2\x2\x18B\x18F\a!\x2\x2\x18C\x18F\x5`\x31\x2\x18D\x18F\a\"\x2\x2\x18E"+
		"\x18B\x3\x2\x2\x2\x18E\x18C\x3\x2\x2\x2\x18E\x18D\x3\x2\x2\x2\x18F\x192"+
		"\x3\x2\x2\x2\x190\x18E\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191_\x3\x2\x2"+
		"\x2\x192\x190\x3\x2\x2\x2\x193\x194\t\x3\x2\x2\x194\x61\x3\x2\x2\x2\x31"+
		"y}\x81\x84\x8B\x8F\x93\xA6\xA9\xB2\xB6\xBB\xBE\xD3\xDE\xE5\xEB\xEE\xFB"+
		"\xFE\x101\x107\x10A\x10E\x114\x119\x11F\x123\x127\x12C\x12F\x132\x137"+
		"\x13D\x145\x14B\x152\x155\x159\x15F\x167\x16A\x16D\x173\x17C\x18E\x190";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace KaVE.Commons.Model.Names.CSharp.Parser
