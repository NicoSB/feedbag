//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jonas\Documents\kave\feedback-generator\KaVE.Commons\Model\Names\CSharp\Parser\TypeNaming.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KaVE.Commons.Model.Names.CSharp.Parser {

/**
 * Copyright 2016 Sebastian Proksch
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="TypeNamingParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public interface ITypeNamingListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.typeEOL"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeEOL([NotNull] TypeNamingParser.TypeEOLContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.typeEOL"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeEOL([NotNull] TypeNamingParser.TypeEOLContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.methodEOL"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodEOL([NotNull] TypeNamingParser.MethodEOLContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.methodEOL"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodEOL([NotNull] TypeNamingParser.MethodEOLContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] TypeNamingParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] TypeNamingParser.TypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.typeParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeParameter([NotNull] TypeNamingParser.TypeParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.typeParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeParameter([NotNull] TypeNamingParser.TypeParameterContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.regularType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRegularType([NotNull] TypeNamingParser.RegularTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.regularType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRegularType([NotNull] TypeNamingParser.RegularTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.delegateType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDelegateType([NotNull] TypeNamingParser.DelegateTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.delegateType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDelegateType([NotNull] TypeNamingParser.DelegateTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayType([NotNull] TypeNamingParser.ArrayTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayType([NotNull] TypeNamingParser.ArrayTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.nestedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNestedType([NotNull] TypeNamingParser.NestedTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.nestedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNestedType([NotNull] TypeNamingParser.NestedTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.nestedTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNestedTypeName([NotNull] TypeNamingParser.NestedTypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.nestedTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNestedTypeName([NotNull] TypeNamingParser.NestedTypeNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.resolvedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResolvedType([NotNull] TypeNamingParser.ResolvedTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.resolvedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResolvedType([NotNull] TypeNamingParser.ResolvedTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.namespace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamespace([NotNull] TypeNamingParser.NamespaceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.namespace"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamespace([NotNull] TypeNamingParser.NamespaceContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeName([NotNull] TypeNamingParser.TypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeName([NotNull] TypeNamingParser.TypeNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.possiblyGenericTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPossiblyGenericTypeName([NotNull] TypeNamingParser.PossiblyGenericTypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.possiblyGenericTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPossiblyGenericTypeName([NotNull] TypeNamingParser.PossiblyGenericTypeNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.enumTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumTypeName([NotNull] TypeNamingParser.EnumTypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.enumTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumTypeName([NotNull] TypeNamingParser.EnumTypeNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.interfaceTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterfaceTypeName([NotNull] TypeNamingParser.InterfaceTypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.interfaceTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterfaceTypeName([NotNull] TypeNamingParser.InterfaceTypeNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.structTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructTypeName([NotNull] TypeNamingParser.StructTypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.structTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructTypeName([NotNull] TypeNamingParser.StructTypeNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.simpleTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleTypeName([NotNull] TypeNamingParser.SimpleTypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.simpleTypeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleTypeName([NotNull] TypeNamingParser.SimpleTypeNameContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.genericTypePart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericTypePart([NotNull] TypeNamingParser.GenericTypePartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.genericTypePart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericTypePart([NotNull] TypeNamingParser.GenericTypePartContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.genericParam"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericParam([NotNull] TypeNamingParser.GenericParamContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.genericParam"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericParam([NotNull] TypeNamingParser.GenericParamContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.boundTypeParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoundTypeParameter([NotNull] TypeNamingParser.BoundTypeParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.boundTypeParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoundTypeParameter([NotNull] TypeNamingParser.BoundTypeParameterContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.assembly"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssembly([NotNull] TypeNamingParser.AssemblyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.assembly"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssembly([NotNull] TypeNamingParser.AssemblyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.assemblyVersion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssemblyVersion([NotNull] TypeNamingParser.AssemblyVersionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.assemblyVersion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssemblyVersion([NotNull] TypeNamingParser.AssemblyVersionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.method"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod([NotNull] TypeNamingParser.MethodContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.method"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod([NotNull] TypeNamingParser.MethodContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.regularMethod"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRegularMethod([NotNull] TypeNamingParser.RegularMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.regularMethod"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRegularMethod([NotNull] TypeNamingParser.RegularMethodContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.methodParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodParameters([NotNull] TypeNamingParser.MethodParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.methodParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodParameters([NotNull] TypeNamingParser.MethodParametersContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.nonStaticCtor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNonStaticCtor([NotNull] TypeNamingParser.NonStaticCtorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.nonStaticCtor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNonStaticCtor([NotNull] TypeNamingParser.NonStaticCtorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.staticCctor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStaticCctor([NotNull] TypeNamingParser.StaticCctorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.staticCctor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStaticCctor([NotNull] TypeNamingParser.StaticCctorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.customMethod"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCustomMethod([NotNull] TypeNamingParser.CustomMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.customMethod"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCustomMethod([NotNull] TypeNamingParser.CustomMethodContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.formalParam"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormalParam([NotNull] TypeNamingParser.FormalParamContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.formalParam"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormalParam([NotNull] TypeNamingParser.FormalParamContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.parameterModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterModifier([NotNull] TypeNamingParser.ParameterModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.parameterModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterModifier([NotNull] TypeNamingParser.ParameterModifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.staticModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStaticModifier([NotNull] TypeNamingParser.StaticModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.staticModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStaticModifier([NotNull] TypeNamingParser.StaticModifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.paramsModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParamsModifier([NotNull] TypeNamingParser.ParamsModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.paramsModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParamsModifier([NotNull] TypeNamingParser.ParamsModifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.optsModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOptsModifier([NotNull] TypeNamingParser.OptsModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.optsModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOptsModifier([NotNull] TypeNamingParser.OptsModifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.refModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRefModifier([NotNull] TypeNamingParser.RefModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.refModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRefModifier([NotNull] TypeNamingParser.RefModifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.outModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOutModifier([NotNull] TypeNamingParser.OutModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.outModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOutModifier([NotNull] TypeNamingParser.OutModifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.extensionModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExtensionModifier([NotNull] TypeNamingParser.ExtensionModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.extensionModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExtensionModifier([NotNull] TypeNamingParser.ExtensionModifierContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterId([NotNull] TypeNamingParser.IdContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitId([NotNull] TypeNamingParser.IdContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeNamingParser.num"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNum([NotNull] TypeNamingParser.NumContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeNamingParser.num"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNum([NotNull] TypeNamingParser.NumContext context);
}
} // namespace KaVE.Commons.Model.Names.CSharp.Parser
