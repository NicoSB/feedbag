/*
 * Copyright 2014 Technische Universität Darmstadt
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jonas\Documents\Visual Studio 2013\Projects\Grammar\Grammar\Model\Names\CSharp\Parser\TypeNaming.g4 by ANTLR 4.5.3-SNAPSHOT

// Unreachable code detected

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;

#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KaVE.Commons.Model.Naming.Impl.v1.Parser
{
    /// <summary>
    ///     This class provides an empty implementation of <see cref="ITypeNamingVisitor{Result}" />,
    ///     which can be extended to create a visitor which only needs to handle a subset
    ///     of the available methods.
    /// </summary>
    /// <typeparam name="Result">The return type of the visit operation.</typeparam>
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3-SNAPSHOT")]
    [System.CLSCompliant(false)]
    public class TypeNamingBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, ITypeNamingVisitor<Result>
    {
        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.typeEOL" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitTypeEOL([NotNull] TypeNamingParser.TypeEOLContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.methodEOL" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMethodEOL([NotNull] TypeNamingParser.MethodEOLContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.namespaceEOL" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitNamespaceEOL([NotNull] TypeNamingParser.NamespaceEOLContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.assemblyEOL" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitAssemblyEOL([NotNull] TypeNamingParser.AssemblyEOLContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.parameterNameEOL" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitParameterNameEOL([NotNull] TypeNamingParser.ParameterNameEOLContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.memberNameEOL" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMemberNameEOL([NotNull] TypeNamingParser.MemberNameEOLContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.lambdaNameEOL" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitLambdaNameEOL([NotNull] TypeNamingParser.LambdaNameEOLContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.type" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitType([NotNull] TypeNamingParser.TypeContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.typeParameter" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitTypeParameter([NotNull] TypeNamingParser.TypeParameterContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.notTypeParameter" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitNotTypeParameter([NotNull] TypeNamingParser.NotTypeParameterContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.regularType" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitRegularType([NotNull] TypeNamingParser.RegularTypeContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.delegateType" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitDelegateType([NotNull] TypeNamingParser.DelegateTypeContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.arrayType" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitArrayType([NotNull] TypeNamingParser.ArrayTypeContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.nestedType" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitNestedType([NotNull] TypeNamingParser.NestedTypeContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.nestedTypeName" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitNestedTypeName([NotNull] TypeNamingParser.NestedTypeNameContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.resolvedType" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitResolvedType([NotNull] TypeNamingParser.ResolvedTypeContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.namespace" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitNamespace([NotNull] TypeNamingParser.NamespaceContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.typeName" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitTypeName([NotNull] TypeNamingParser.TypeNameContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.possiblyGenericTypeName" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPossiblyGenericTypeName(
            [NotNull] TypeNamingParser.PossiblyGenericTypeNameContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.enumTypeName" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitEnumTypeName([NotNull] TypeNamingParser.EnumTypeNameContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.interfaceTypeName" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitInterfaceTypeName([NotNull] TypeNamingParser.InterfaceTypeNameContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.structTypeName" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitStructTypeName([NotNull] TypeNamingParser.StructTypeNameContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.simpleTypeName" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitSimpleTypeName([NotNull] TypeNamingParser.SimpleTypeNameContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.genericTypePart" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitGenericTypePart([NotNull] TypeNamingParser.GenericTypePartContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.genericParam" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitGenericParam([NotNull] TypeNamingParser.GenericParamContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.assembly" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitAssembly([NotNull] TypeNamingParser.AssemblyContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.regularAssembly" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitRegularAssembly([NotNull] TypeNamingParser.RegularAssemblyContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.assemblyVersion" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitAssemblyVersion([NotNull] TypeNamingParser.AssemblyVersionContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.assemblyName" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitAssemblyName([NotNull] TypeNamingParser.AssemblyNameContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.memberName" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMemberName([NotNull] TypeNamingParser.MemberNameContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.simpleMemberName" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitSimpleMemberName([NotNull] TypeNamingParser.SimpleMemberNameContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.propertyName" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPropertyName([NotNull] TypeNamingParser.PropertyNameContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.propertyModifier" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPropertyModifier([NotNull] TypeNamingParser.PropertyModifierContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.bothPropertyModifiers" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitBothPropertyModifiers([NotNull] TypeNamingParser.BothPropertyModifiersContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.lambdaName" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitLambdaName([NotNull] TypeNamingParser.LambdaNameContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.realLambdaName" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitRealLambdaName([NotNull] TypeNamingParser.RealLambdaNameContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.method" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMethod([NotNull] TypeNamingParser.MethodContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.regularMethod" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitRegularMethod([NotNull] TypeNamingParser.RegularMethodContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.methodSignature" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMethodSignature([NotNull] TypeNamingParser.MethodSignatureContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.nonStaticCtor" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitNonStaticCtor([NotNull] TypeNamingParser.NonStaticCtorContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.staticCctor" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitStaticCctor([NotNull] TypeNamingParser.StaticCctorContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.customMethod" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitCustomMethod([NotNull] TypeNamingParser.CustomMethodContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.methodDefinition" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMethodDefinition([NotNull] TypeNamingParser.MethodDefinitionContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.formalParam" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitFormalParam([NotNull] TypeNamingParser.FormalParamContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.parameterModifier" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitParameterModifier([NotNull] TypeNamingParser.ParameterModifierContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.staticModifier" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitStaticModifier([NotNull] TypeNamingParser.StaticModifierContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.paramsModifier" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitParamsModifier([NotNull] TypeNamingParser.ParamsModifierContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.optsModifier" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitOptsModifier([NotNull] TypeNamingParser.OptsModifierContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.refModifier" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitRefModifier([NotNull] TypeNamingParser.RefModifierContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.outModifier" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitOutModifier([NotNull] TypeNamingParser.OutModifierContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.extensionModifier" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitExtensionModifier([NotNull] TypeNamingParser.ExtensionModifierContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.id" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitId([NotNull] TypeNamingParser.IdContext context)
        {
            return VisitChildren(context);
        }

        /// <summary>
        ///     Visit a parse tree produced by <see cref="TypeNamingParser.num" />.
        ///     <para>
        ///         The default implementation returns the result of calling
        ///         <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)" />
        ///         on <paramref name="context" />.
        ///     </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitNum([NotNull] TypeNamingParser.NumContext context)
        {
            return VisitChildren(context);
        }
    }
} // namespace KaVE.Commons.Model.Names.CSharp.Parser