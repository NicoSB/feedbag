<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description_1" xml:space="preserve">
    <value>Schließe erfolgreich 5 Codecompletions ab</value>
  </data>
  <data name="Description_10" xml:space="preserve">
    <value>Erfolgreich 250 Testklassen erstellt</value>
  </data>
  <data name="Description_11" xml:space="preserve">
    <value>Erfolgreich 500 Testklassen erstellt</value>
  </data>
  <data name="Description_12" xml:space="preserve">
    <value>10 Mal erfolgreich kompiliert</value>
  </data>
  <data name="Description_13" xml:space="preserve">
    <value>100 Mal erfolgreich kompiliert</value>
  </data>
  <data name="Description_14" xml:space="preserve">
    <value>1000 Mal erfolgreich kompliliert</value>
  </data>
  <data name="Description_15" xml:space="preserve">
    <value>Arbeite zwischen 22 und 4 Uhr</value>
  </data>
  <data name="Description_16" xml:space="preserve">
    <value>Benutze den Resharper Alt+Enter Quickfix 1 Mal</value>
  </data>
  <data name="Description_17" xml:space="preserve">
    <value>Benutze den Resharper Alt+Enter Quickfix 100 Mal</value>
  </data>
  <data name="Description_18" xml:space="preserve">
    <value>Benutze den Resharper Alt+Enter Quickfix 1000 Mal</value>
  </data>
  <data name="Description_19" xml:space="preserve">
    <value>Benutze den Resharper CleanUp 1 Mal</value>
  </data>
  <data name="Description_2" xml:space="preserve">
    <value>Schließe erfolgreich 50 Codecompletions ab</value>
  </data>
  <data name="Description_20" xml:space="preserve">
    <value>Benutze den Resharper CleanUp 100 Mal</value>
  </data>
  <data name="Description_21" xml:space="preserve">
    <value>Benutze den Resharper CleanUp 1000 Mal</value>
  </data>
  <data name="Description_22" xml:space="preserve">
    <value>Kompilierung schlägt 10 Mal fehl</value>
  </data>
  <data name="Description_23" xml:space="preserve">
    <value>Kompilierung schlägt 100 Mal fehl</value>
  </data>
  <data name="Description_24" xml:space="preserve">
    <value>Kompilierung schlägt 1000 Mal fehl</value>
  </data>
  <data name="Description_25" xml:space="preserve">
    <value>Mache 100 Codeänderungen zwischen zwei Commits</value>
  </data>
  <data name="Description_26" xml:space="preserve">
    <value>Mache 500 Codeänderungen zwischen zwei Commits</value>
  </data>
  <data name="Description_27" xml:space="preserve">
    <value>Mache 1000 Codeänderungen zwischen zwei Commits</value>
  </data>
  <data name="Description_28" xml:space="preserve">
    <value>Mache 5000 Codeänderungen zwischen zwei Commits</value>
  </data>
  <data name="Description_29" xml:space="preserve">
    <value>Mache 10000 Codeänderungen zwischen zwei Commits</value>
  </data>
  <data name="Description_3" xml:space="preserve">
    <value>Schließe erfolgreich 100 Codecompletions ab</value>
  </data>
  <data name="Description_30" xml:space="preserve">
    <value>Erstelle 5 Commits</value>
  </data>
  <data name="Description_31" xml:space="preserve">
    <value>Erstelle 50 Commits</value>
  </data>
  <data name="Description_32" xml:space="preserve">
    <value>Erstelle 100 Commits</value>
  </data>
  <data name="Description_33" xml:space="preserve">
    <value>Erstelle 500 Commits</value>
  </data>
  <data name="Description_34" xml:space="preserve">
    <value>Erstelle 1000 Commits</value>
  </data>
  <data name="Description_35" xml:space="preserve">
    <value>Debugge deinen Code 1 Minute</value>
  </data>
  <data name="Description_36" xml:space="preserve">
    <value>Debugge deinen Code 5 Minute</value>
  </data>
  <data name="Description_37" xml:space="preserve">
    <value>Debugge deinen Code 15 Minute</value>
  </data>
  <data name="Description_38" xml:space="preserve">
    <value>Debugge deinen Code 30 Minute</value>
  </data>
  <data name="Description_39" xml:space="preserve">
    <value>Debugge deinen Code 1 Stunde</value>
  </data>
  <data name="Description_4" xml:space="preserve">
    <value>Schließe erfolgreich 500 Codecompletions ab</value>
  </data>
  <data name="Description_5" xml:space="preserve">
    <value>Schließe erfolgreich 1000 Codecompletions ab</value>
  </data>
  <data name="Description_6" xml:space="preserve">
    <value>Glückwunsch! Sie haben erfolgreich das KaVE Achievements Plugin installiert</value>
  </data>
  <data name="Description_7" xml:space="preserve">
    <value>Erolgreich 5 Testklassen erstellt</value>
  </data>
  <data name="Description_8" xml:space="preserve">
    <value>Erfolgreich 20 Testklassen erstellt</value>
  </data>
  <data name="Description_9" xml:space="preserve">
    <value>Erfolgreich 100 Testklassen erstellt</value>
  </data>
  <data name="Title_1" xml:space="preserve">
    <value>Codevervollständigungeinführung Vervollständigt</value>
  </data>
  <data name="Title_10" xml:space="preserve">
    <value>Test-a-holic</value>
  </data>
  <data name="Title_11" xml:space="preserve">
    <value>TEST-osteron</value>
  </data>
  <data name="Title_12" xml:space="preserve">
    <value>So weit, so gut</value>
  </data>
  <data name="Title_13" xml:space="preserve">
    <value>Hoffen wir mal das es nicht abstürzt.</value>
  </data>
  <data name="Title_14" xml:space="preserve">
    <value>Fehlerfrei</value>
  </data>
  <data name="Title_15" xml:space="preserve">
    <value>Nachtarbeiter</value>
  </data>
  <data name="Title_16" xml:space="preserve">
    <value>Ich hab einen QuickFix gemacht</value>
  </data>
  <data name="Title_17" xml:space="preserve">
    <value>Magischer Fix</value>
  </data>
  <data name="Title_18" xml:space="preserve">
    <value>QuickFix Meister</value>
  </data>
  <data name="Title_19" xml:space="preserve">
    <value>Hausmeister Lehrling</value>
  </data>
  <data name="Title_2" xml:space="preserve">
    <value>Kannst Du Das Für Mich Vervollständigen?</value>
  </data>
  <data name="Title_20" xml:space="preserve">
    <value>Chefhausmeister</value>
  </data>
  <data name="Title_21" xml:space="preserve">
    <value>Meister Proper</value>
  </data>
  <data name="Title_22" xml:space="preserve">
    <value>Hoppla!</value>
  </data>
  <data name="Title_23" xml:space="preserve">
    <value>Ich hab 99 Fehler, aber ein Semikolon ist es nicht </value>
  </data>
  <data name="Title_24" xml:space="preserve">
    <value>Ach nein!</value>
  </data>
  <data name="Title_25" xml:space="preserve">
    <value>Eine Kleine Veränderung</value>
  </data>
  <data name="Title_26" xml:space="preserve">
    <value>Behalte Die Änderung Bei</value>
  </data>
  <data name="Title_27" xml:space="preserve">
    <value>Zeit Für Veränderung</value>
  </data>
  <data name="Title_28" xml:space="preserve">
    <value>Neuanordnung</value>
  </data>
  <data name="Title_29" xml:space="preserve">
    <value>Komplette Umarbeitung</value>
  </data>
  <data name="Title_3" xml:space="preserve">
    <value>Codevervollständigung Ist Meine Lieblingsfunktion</value>
  </data>
  <data name="Title_30" xml:space="preserve">
    <value>Commite Mal!</value>
  </data>
  <data name="Title_31" xml:space="preserve">
    <value>Versionskontrolle</value>
  </data>
  <data name="Title_32" xml:space="preserve">
    <value>Ich Commite Regelmäßig</value>
  </data>
  <data name="Title_33" xml:space="preserve">
    <value>Commit Fanatiker</value>
  </data>
  <data name="Title_34" xml:space="preserve">
    <value>Volles Commitment</value>
  </data>
  <data name="Title_35" xml:space="preserve">
    <value>Käfer Zerquetscher</value>
  </data>
  <data name="Title_36" xml:space="preserve">
    <value>Ungeziefer Spray</value>
  </data>
  <data name="Title_37" xml:space="preserve">
    <value>Käferphobie</value>
  </data>
  <data name="Title_38" xml:space="preserve">
    <value>Insektizid</value>
  </data>
  <data name="Title_39" xml:space="preserve">
    <value>Kammerjäger</value>
  </data>
  <data name="Title_4" xml:space="preserve">
    <value>Ich Lasse Nichts Unvervollständigt</value>
  </data>
  <data name="Title_5" xml:space="preserve">
    <value>Ultimativer Vervollständiger</value>
  </data>
  <data name="Title_6" xml:space="preserve">
    <value>Plugin Erfolg</value>
  </data>
  <data name="Title_7" xml:space="preserve">
    <value>Ein wenig getestet</value>
  </data>
  <data name="Title_8" xml:space="preserve">
    <value>Lieber schauen dass es funktioniert</value>
  </data>
  <data name="Title_9" xml:space="preserve">
    <value>Ich bin sicher dass es funktioniert. Ist getestet.</value>
  </data>
</root>