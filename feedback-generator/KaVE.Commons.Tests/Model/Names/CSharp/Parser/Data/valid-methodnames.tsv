identifier	decltype	rettype	simplename	paras	typeparas	static	generic
[T1,P] [T2,P].M()	T2,P	T1,P	M			f	f
[?] [?].M( )	?	?	M			f	f
[?] [?].M([?] p)	?	?	M	[?] p		f	f
[?] [?].M([?] p1,[?] p2)	?	?	M	[?] p1;[?] p2		f	f
[?][?].M([?]p1,[?] p2, [?] p3 , [?] p4 )	?	?	M	[?]p1;[?] p2;[?] p3;[?] p4		f	f
[T,P][T,P].M()	T,P	T,P	M			f	f
# generic methods
[T,P] [n.T,P].M'1[[T -> ?]]()	n.T,P	T,P	M		[T -> ?]	f	t	
[?] [?].M'2[[T->P],[T2]]()	?	?	M		[T->P];[T2]	f	t
[?] [?].M'2[[T],[T1]]([T,P] p1, [?] p2 )	?	?	M	[T,P] p1;[?] p2	[T];[T1]	f	t
[?] [?].M'2[[T->P],[T2->P2]]([?] p1 )	?	?	M	[?] p1	[T->P];[T2->P2]	f	t
# static methods
static [?] [?].M()	?	?	M			t	f
static [?] [?].M'1[[T]]()	?	?	M		[T]	t	t
static [?] [?].M([?] p1)	?	?	M	[?] p1		t	f
static [?] [?].M'2[[T],[T1]]([?] p1, [?] p2)	?	?	M	[?] p1;[?] p2	[T];[T1]	t	t
# methods with parameter modifiers
[?] [?].M(params [?] p1,[?] p2)	?	?	M	params [?] p1;[?] p2		f	f
[?] [?].M([?] p1,params [?] p2)	?	?	M	[?] p1;params [?] p2		f	f
[?] [?].M(ref [?] p1,ref [?] p2)	?	?	M	ref [?] p1;ref [?] p2		f	f
[?] [?].M(opt [?] p1,[?] p2)	?	?	M	opt [?] p1;[?] p2		f	f
[?] [T, n.P, 0.0.0.0].M()	T, n.P, 0.0.0.0	?	M			f	f