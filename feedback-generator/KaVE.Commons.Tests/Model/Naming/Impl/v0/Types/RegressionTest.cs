/*
 * Copyright 2014 Technische Universität Darmstadt
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using KaVE.Commons.Model.Naming.CodeElements;
using KaVE.Commons.Model.Naming.Impl.v0.Types;
using KaVE.Commons.Model.Naming.Impl.v0.Types.Organization;
using KaVE.Commons.Model.Naming.Types;
using KaVE.Commons.Utils.Collections;
using NUnit.Framework;

namespace KaVE.Commons.Tests.Model.Naming.Impl.v0.Types
{
    /// <summary>
    ///     Just some names as generated by the old namefactory, incl. the output of the old names
    ///     AUTO GENERATED!
    /// </summary>
    internal class RegressionTest
    {
        private string[] toTest = {"d:[T] [DT`1[[T -> String, mscorlib]]].([T] p)[]"};

        [Test, Ignore]
        public void test0()
        {
            const string id = "d:[System.Void, mscorlib, 4.0.0.0] [System.Action, mscorlib, 4.0.0.0].()";

            var sut = TypeUtils.CreateTypeName(id);
            Assert.AreEqual("DelegateTypeName", sut.GetType().Name);
            Assert.IsFalse(sut.IsUnknown);
            Assert.IsFalse(sut.IsHashed);

            Assert.AreEqual(new AssemblyName("mscorlib, 4.0.0.0"), sut.Assembly);
            Assert.AreEqual(new NamespaceName("System"), sut.Namespace);
            Assert.Null(sut.DeclaringType);
            Assert.AreEqual("System.Action", sut.FullName);
            Assert.AreEqual("Action", sut.Name);

            // tests
            Assert.IsFalse(sut.IsVoidType);
            Assert.IsFalse(sut.IsValueType);
            Assert.IsFalse(sut.IsSimpleType);
            Assert.IsFalse(sut.IsEnumType);
            Assert.IsFalse(sut.IsStructType);
            Assert.IsFalse(sut.IsNullableType);
            Assert.True(sut.IsReferenceType);
            Assert.IsFalse(sut.IsClassType);
            Assert.IsFalse(sut.IsInterfaceType);
            Assert.IsFalse(sut.IsNestedType);

            // generics
            Assert.IsFalse(sut.HasTypeParameters);
            Assert.AreEqual(Lists.NewList<ITypeParameterName>(), sut.TypeParameters);

            // arrays
            Assert.IsFalse(sut.IsArray);
            var sutAsArray = sut.AsArrayTypeName;
            Assert.AreEqual(TypeUtils.CreateTypeName("i:a.b.I, P"), sutAsArray.ArrayBaseType);
            Assert.AreEqual(1, sutAsArray.Rank);

            // type parameter
            Assert.IsFalse(sut.IsTypeParameter);
            var sutAsTypeParam = sut.AsTypeParameterName;
            Assert.AreEqual("...", sutAsTypeParam.TypeParameterShortName);
            Assert.AreEqual(TypeUtils.CreateTypeName("..."), sutAsTypeParam.TypeParameterType);

            // delegate
            Assert.IsTrue(sut.IsDelegateType);
            var sutAsDelegate = sut.AsDelegateTypeName;
            Assert.AreEqual(TypeUtils.CreateTypeName("System.Action, mscorlib, 4.0.0.0"), sutAsDelegate.DelegateType);
            Assert.IsFalse(sutAsDelegate.HasParameters);
            Assert.AreEqual(Lists.NewList<IParameterName>(), sutAsDelegate.Parameters);
            Assert.AreEqual(TypeUtils.CreateTypeName("System.Void, mscorlib, 4.0.0.0"), sutAsDelegate.ReturnType);
        }
    }
}