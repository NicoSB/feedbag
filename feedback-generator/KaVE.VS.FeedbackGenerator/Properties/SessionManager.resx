<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EventDelete" xml:space="preserve">
    <value>Delete selected event(s)</value>
  </data>
  <data name="EventDeleteConfirmPlural" xml:space="preserve">
    <value>Delete the {0} selected events?</value>
  </data>
  <data name="EventDeleteConfirmSingular" xml:space="preserve">
    <value>Delete the selected event?</value>
  </data>
  <data name="EventDeleteConfirmTitle" xml:space="preserve">
    <value>Delete event(s)</value>
  </data>
  <data name="EventData" xml:space="preserve">
    <value>Event Data</value>
  </data>
  <data name="Events" xml:space="preserve">
    <value>Events</value>
  </data>
  <data name="EventTime" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="EventType" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Export" xml:space="preserve">
    <value>Starts the Export Wizard...</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Opens the options page...</value>
  </data>
  <data name="Refresh" xml:space="preserve">
    <value>Refreshes the list of sessions</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Provide Feedback</value>
  </data>
  <data name="SessionDay" xml:space="preserve">
    <value>Day of the session</value>
  </data>
  <data name="SessionDelete" xml:space="preserve">
    <value>Delete selected session(s)</value>
  </data>
  <data name="SessionDeleteConfirmPlural" xml:space="preserve">
    <value>Delete the {0} selected sessions?</value>
  </data>
  <data name="SessionDeleteConfirmSingular" xml:space="preserve">
    <value>Delete the selected session?</value>
  </data>
  <data name="SessionDeleteConfirmTitle" xml:space="preserve">
    <value>Delete sessions</value>
  </data>
  <data name="Sessions" xml:space="preserve">
    <value>Sessions</value>
  </data>
  <data name="VisitHomepage" xml:space="preserve">
    <value>Open the official website of the project</value>
  </data>
  <data name="Options_Title" xml:space="preserve">
    <value>KaVE Feedback</value>
  </data>
  <data name="EventActiveDocument" xml:space="preserve">
    <value>Active Document</value>
  </data>
  <data name="EventActiveWindow" xml:space="preserve">
    <value>Active Window</value>
  </data>
  <data name="EventDetails" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="EventDuration" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="EventDurationUnit" xml:space="preserve">
    <value>ms</value>
  </data>
  <data name="EventTrigger" xml:space="preserve">
    <value>Trigger</value>
  </data>
  <data name="Refreshing" xml:space="preserve">
    <value>Loading Events</value>
  </data>
  <data name="EventContext" xml:space="preserve">
    <value>Context</value>
  </data>
  <data name="SaveFileDialogFilter" xml:space="preserve">
    <value>Zip files (*.zip)|*.zip|All files (*.*)|*.*</value>
  </data>
  <data name="DesignView" xml:space="preserve">
    <value>Design</value>
  </data>
  <data name="RawView" xml:space="preserve">
    <value>JSON</value>
  </data>
  <data name="Options_Export_Title" xml:space="preserve">
    <value>Exportoptions</value>
  </data>
  <data name="Option_SettingsCleaner_Dialog" xml:space="preserve">
    <value>Settings will be reset and the locally generated feedback will be deleted. Are you sure?</value>
  </data>
  <data name="Options_Export_UploadUrl" xml:space="preserve">
    <value>Upload URL</value>
  </data>
  <data name="VisitUploadPage" xml:space="preserve">
    <value>Open website for manual upload of feedback...</value>
  </data>
  <data name="Options_Export_WebAccessPraefix" xml:space="preserve">
    <value>Prefix for Web-Access</value>
  </data>
  <data name="DetailsForSingleSelectedEvent" xml:space="preserve">
    <value>Select event for more details</value>
  </data>
  <data name="DetailsForSingleSelectedSession" xml:space="preserve">
    <value>Select session for more details</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Lade Feedback</value>
  </data>
  <data name="OptionPageInvalidUploadInfoMessage" xml:space="preserve">
    <value>Invalid url, only HTTP- oder HTTPS are supported.</value>
  </data>
  <data name="VisitHomepage_Button" xml:space="preserve">
    <value>Project Website</value>
  </data>
  <data name="Export_Button" xml:space="preserve">
    <value>Export Wizard</value>
  </data>
  <data name="Options_Button" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="Refresh_Button" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="VisitUploadPage_Button" xml:space="preserve">
    <value>Website for Manual Upload</value>
  </data>
  <data name="EventProposals" xml:space="preserve">
    <value>Proposals</value>
  </data>
  <data name="EventSelection" xml:space="preserve">
    <value>Ausgewählt</value>
  </data>
  <data name="Session" xml:space="preserve">
    <value>Day</value>
  </data>
  <data name="OptionPageInvalidModelStorePathMessage" xml:space="preserve">
    <value>Folder does not exist</value>
  </data>
  <data name="Options_ModelPath" xml:space="preserve">
    <value>Path to Usage Models</value>
  </data>
  <data name="Desc_AnonymizationDisclaimer" xml:space="preserve">
    <value>Die Exportoptionen bestimmen, welche Feedback-Details Ihren Rechner beim Export verlassen. Lokal wird das Feedback immer vollständig aufgenommen, um Ihnen die Einsicht zu erleichtern. Wenn Sie die Wirkung der Exportoptionen prüfen wollen, exportieren Sie einfach in ein ZIP-Archiv zum manuellen Hochladen. Diese Archive enthalten alle exportierten Informationen im Klartext.</value>
  </data>
  <data name="Options_ModelUrl" xml:space="preserve">
    <value>Remote Usage Models</value>
  </data>
</root>